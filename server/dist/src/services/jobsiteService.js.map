{"version":3,"file":"jobsiteService.js","sourceRoot":"/","sources":["src/services/jobsiteService.ts"],"names":[],"mappings":"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","sourcesContent":["// server/src/services/jobsiteService.ts\nimport prisma from \"../lib/prisma.js\";\n\nexport async function getJobsites(query: { qrg?: boolean }) {\n  if (query.qrg) {\n    return prisma.jobsite.findMany({\n      where: {\n        status: { not: \"ARCHIVED\" },\n      },\n      select: {\n        id: true,\n        qrId: true,\n        name: true,\n        code: true,\n        status: true,\n      },\n    });\n  } else {\n    return prisma.jobsite.findMany();\n  }\n}\n\n// Find a jobsite by QR code (for QR code uniqueness check)\nexport async function getJobsiteByQrId(qrId: string) {\n  const jobsite = await prisma.jobsite.findFirst({ where: { qrId } });\n  console.log(\"Jobsite found by QR ID:\", jobsite);\n  return jobsite;\n}\n\nexport async function getJobsiteById(id: string) {\n  return prisma.jobsite.findUnique({ where: { id } });\n}\n\nexport async function createJobsite(data: any) {\n  // Accept both 'name' and 'temporaryJobsiteName' from the request\n  const name = data.name || data.temporaryJobsiteName;\n  const {\n    code,\n    qrId,\n    creationComment,\n    creationReasoning,\n    createdById,\n    address,\n    city,\n    state,\n    zipCode,\n  } = data;\n\n  return prisma.$transaction(async (prisma) => {\n    // Check for duplicate jobsite name\n    const existingJobsites = await prisma.jobsite.findMany({ where: { name } });\n    if (existingJobsites.length > 0) {\n      throw new Error(\"A jobsite with the same name already exists.\");\n    }\n\n    const existingCode = await prisma.jobsite.findMany({ where: { code } });\n\n    if (existingCode.length > 0) {\n      throw new Error(\"Jobsite code must be empty upon creation.\");\n    }\n\n    const jobsiteData: any = {\n      name,\n      code,\n      qrId,\n      description: creationComment,\n      creationReason: creationReasoning,\n      approvalStatus: \"PENDING\",\n      status: \"ACTIVE\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      CCTags: {\n        connect: { id: \"All\" },\n      },\n      createdBy: createdById ? { connect: { id: createdById } } : undefined,\n    };\n\n    if (address && city && state && zipCode) {\n      // Try to find address first\n      let addr = await prisma.address.findFirst({\n        where: { street: address, city, state, zipCode },\n      });\n      if (!addr) {\n        addr = await prisma.address.create({\n          data: { street: address, city, state, zipCode },\n        });\n      }\n      if (addr) {\n        jobsiteData.Address = { connect: { id: addr.id } };\n      }\n    }\n\n    // Create the jobsite and get the created record\n    const jobsite = await prisma.jobsite.create({\n      data: jobsiteData,\n      include: {\n        createdBy: {\n          select: { firstName: true, lastName: true },\n        },\n      },\n    });\n    return jobsite;\n  });\n}\n\nexport async function updateJobsite(id: string, updates: any) {\n  return prisma.jobsite.update({\n    where: { id },\n    data: updates,\n  });\n}\n\nexport async function deleteJobsite(id: string) {\n  try {\n    await prisma.jobsite.delete({ where: { id } });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n"]}