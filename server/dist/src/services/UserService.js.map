{"version":3,"file":"UserService.js","sources":["src/services/UserService.ts"],"sourceRoot":"/","sourcesContent":["import { UserModel } from \"../models/User.js\";\nimport type { User, Prisma } from \"../../generated/prisma/index.js\";\nimport { hash } from \"bcryptjs\";\n\nexport class UserService {\n  // Helper function to create user with companyId\n  static createUserWithCompanyId(\n    userData: Omit<Prisma.UserCreateInput, \"Company\"> & { companyId: string }\n  ): Prisma.UserCreateInput {\n    const { companyId, ...userDataWithoutCompanyId } = userData;\n    return {\n      ...userDataWithoutCompanyId,\n      Company: {\n        connect: { id: companyId },\n      },\n    };\n  }\n\n  // Get all users\n  static async getAllUsers(): Promise<User[]> {\n    try {\n      return await UserModel.findAll();\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch users: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n\n  // Get user by ID\n  static async getUserById(id: string) {\n    if (!id) {\n      throw new Error(\"User ID is required\");\n    }\n\n    try {\n      const user = await UserModel.findById(id);\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n      return user;\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch user: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n\n  // Create new user\n  static async createUser(userData: Prisma.UserCreateInput): Promise<User> {\n    // Validate required fields\n    if (!userData.firstName) {\n      throw new Error(\"First name is required\");\n    }\n    if (!userData.lastName) {\n      throw new Error(\"Last name is required\");\n    }\n    if (!userData.username) {\n      throw new Error(\"Username is required\");\n    }\n    if (!userData.password) {\n      throw new Error(\"Password is required\");\n    }\n    if (!userData.Company) {\n      throw new Error(\"Company is required\");\n    }\n\n    // Validate email format if provided\n    if (userData.email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error(\"Invalid email format\");\n      }\n    }\n\n    try {\n      // Check if user already exists\n      if (userData.email) {\n        const existingUser = await UserModel.findByEmail(userData.email);\n        if (existingUser) {\n          throw new Error(\"User with this email already exists\");\n        }\n      }\n\n      // Check if username already exists\n      const existingUsername = await UserModel.findByUsername(\n        userData.username\n      );\n      if (existingUsername) {\n        throw new Error(\"Username already exists\");\n      }\n\n      return await UserModel.create(userData);\n    } catch (error) {\n      throw new Error(\n        `Failed to create user: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n\n  // Update user\n  static async updateUser(\n    id: string,\n    userData: Prisma.UserUpdateInput\n  ): Promise<User> {\n    if (!id) {\n      throw new Error(\"User ID is required\");\n    }\n    //hash the password here\n    if (userData.password) {\n      userData.password = await hash(userData.password as string, 10);\n    }\n\n    if (userData.email && typeof userData.email === \"string\") {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error(\"Invalid email format\");\n      }\n\n      // Check if email is already taken by another user\n      const existingUser = await UserModel.findByEmail(userData.email);\n      if (existingUser && existingUser.id !== id) {\n        throw new Error(\"Email is already taken by another user\");\n      }\n    }\n\n    // Support nested updates for Contact and UserSettings\n    const updateData: Prisma.UserUpdateInput = { ...userData };\n    if (userData.Contact) {\n      updateData.Contact = { update: userData.Contact };\n    }\n    if (userData.UserSettings) {\n      updateData.UserSettings = { update: userData.UserSettings };\n    }\n\n    try {\n      return await UserModel.update(id, updateData);\n    } catch (error) {\n      throw new Error(\n        `Failed to update user: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n\n  // Delete user\n  static async deleteUser(id: string) {\n    if (!id) {\n      throw new Error(\"User ID is required\");\n    }\n\n    try {\n      await this.getUserById(id); // Check if user exists\n      return await UserModel.delete(id);\n    } catch (error) {\n      throw new Error(\n        `Failed to delete user: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n}\n\nexport default UserService;\n"],"names":[],"mappings":"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","debug_id":"3b0446b4-2597-5739-8c1b-b6e45efd00ed"}