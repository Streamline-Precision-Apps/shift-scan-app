{"version":3,"file":"UserService.js","sourceRoot":"/","sources":["src/services/UserService.ts"],"names":[],"mappings":"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","sourcesContent":["import { upsertContact } from \"../models/Contacts.js\";\n\nimport prisma from \"../lib/prisma.js\";\nimport type { User, Prisma } from \"../../generated/prisma/index.js\";\nimport { hash } from \"bcryptjs\";\n\nconst ALLOWED_USER_FIELDS = [\n  \"id\",\n  \"username\",\n  \"email\",\n  \"firstName\",\n  \"lastName\",\n  \"signature\",\n  \"DOB\",\n  \"truckView\",\n  \"tascoView\",\n  \"laborView\",\n  \"mechanicView\",\n  \"permission\",\n  \"image\",\n  \"startDate\",\n  \"terminationDate\",\n  \"workTypeId\",\n  \"middleName\",\n  \"secondLastName\",\n  \"createdAt\",\n  \"updatedAt\",\n  \"lastSeen\",\n];\n\n// Create user with companyId helper\nexport function createUserWithCompanyId(\n  userData: Omit<Prisma.UserCreateInput, \"Company\"> & { companyId: string }\n): Prisma.UserCreateInput {\n  const { companyId, ...userDataWithoutCompanyId } = userData;\n  return {\n    ...userDataWithoutCompanyId,\n    Company: {\n      connect: { id: companyId },\n    },\n  };\n}\nexport async function getAllUsers(): Promise<User[]> {\n  try {\n    return await prisma.user.findMany({\n      orderBy: { startDate: \"desc\" },\n    });\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch users: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function getUserById(id: string) {\n  if (!id) {\n    throw new Error(\"User ID is required\");\n  }\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id },\n    });\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch user: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function getUserByIdQuery(id: string, query: string) {\n  if (!id) throw new Error(\"User ID is required\");\n\n  // Parse and validate fields\n  const fields = query\n    .split(\",\")\n    .map((f) => f.trim())\n    .filter(Boolean);\n\n  const invalidFields = fields.filter((f) => !ALLOWED_USER_FIELDS.includes(f));\n  if (invalidFields.length > 0) {\n    throw new Error(`Invalid field(s) requested: ${invalidFields.join(\", \")}`);\n  }\n\n  // Build select object\n  const select: Record<string, true> = {};\n  for (const field of fields) {\n    select[field] = true;\n  }\n\n  try {\n    const user = await prisma.user.findUnique({\n      where: { id },\n      select,\n    });\n    if (!user) throw new Error(\"User not found\");\n    return user;\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch user: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function createUser(\n  userData: Prisma.UserCreateInput\n): Promise<User> {\n  // Validate required fields\n  if (!userData.firstName) {\n    throw new Error(\"First name is required\");\n  }\n  if (!userData.lastName) {\n    throw new Error(\"Last name is required\");\n  }\n  if (!userData.username) {\n    throw new Error(\"Username is required\");\n  }\n  if (!userData.password) {\n    throw new Error(\"Password is required\");\n  }\n  if (!userData.Company) {\n    throw new Error(\"Company is required\");\n  }\n\n  // Validate email format if provided\n  if (userData.email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      throw new Error(\"Invalid email format\");\n    }\n  }\n\n  try {\n    // Check if user already exists\n    if (userData.email) {\n      const existingUser = await prisma.user.findUnique({\n        where: { email: userData.email },\n      });\n      if (existingUser) {\n        throw new Error(\"User with this email already exists\");\n      }\n    }\n\n    if (userData.username) {\n      const existingUsername = await prisma.user.findUnique({\n        where: { username: userData.username },\n      });\n      if (existingUsername) {\n        throw new Error(\"Username already exists\");\n      }\n    }\n\n    return await prisma.user.create({\n      data: userData,\n    });\n  } catch (error) {\n    throw new Error(\n      `Failed to create user: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function updateUser(\n  id: string,\n  userData: Prisma.UserUpdateInput\n): Promise<User> {\n  if (!id) {\n    throw new Error(\"User ID is required\");\n  }\n  //hash the password here\n  if (userData.password) {\n    userData.password = await hash(userData.password as string, 10);\n  }\n\n  if (userData.email && typeof userData.email === \"string\") {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      throw new Error(\"Invalid email format\");\n    }\n\n    // Check if email is already taken by another user\n    const existingUser = await prisma.user.findUnique({\n      where: { email: userData.email },\n    });\n    if (existingUser && existingUser.id !== id) {\n      throw new Error(\"Email is already taken by another user\");\n    }\n  }\n  if (userData.image && typeof userData.image !== \"string\") {\n    throw new Error(\"Image must be a string URL\");\n  }\n\n  // Support nested updates for Contact and UserSettings\n  const updateData: Prisma.UserUpdateInput = { ...userData };\n  if (userData.Contact) {\n    updateData.Contact = { update: userData.Contact };\n  }\n  if (userData.UserSettings) {\n    updateData.UserSettings = { update: userData.UserSettings };\n  }\n\n  try {\n    return await prisma.user.update({\n      where: { id },\n      data: updateData,\n    });\n  } catch (error) {\n    throw new Error(\n      `Failed to update user: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function deleteUser(id: string) {\n  if (!id) {\n    throw new Error(\"User ID is required\");\n  }\n\n  try {\n    const user = await prisma.user.findUnique({ where: { id } });\n    if (!user) throw new Error(\"User not found\");\n    return await prisma.user.delete({ where: { id } });\n  } catch (error) {\n    throw new Error(\n      `Failed to delete user: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n\nexport async function getUserSettings(userId: string) {\n  return prisma.userSettings.findUnique({\n    where: { userId },\n  });\n}\n\nexport async function updateUserSettings(\n  userId: string,\n  data: Partial<Prisma.UserSettingsUpdateInput>\n) {\n  const cleanData: Partial<Prisma.UserSettingsUpdateInput> = {};\n  if (typeof data.language === \"string\") cleanData.language = data.language;\n  if (typeof data.generalReminders === \"boolean\")\n    cleanData.generalReminders = data.generalReminders;\n  if (typeof data.personalReminders === \"boolean\")\n    cleanData.personalReminders = data.personalReminders;\n  if (typeof data.cameraAccess === \"boolean\")\n    cleanData.cameraAccess = data.cameraAccess;\n  if (typeof data.locationAccess === \"boolean\")\n    cleanData.locationAccess = data.locationAccess;\n  if (typeof data.cookiesAccess === \"boolean\")\n    cleanData.cookiesAccess = data.cookiesAccess;\n  return prisma.userSettings.update({\n    where: { userId },\n    data: cleanData,\n  });\n}\n\nexport async function updateContact(\n  userId: string,\n  data: Partial<Prisma.ContactsUpdateInput>\n) {\n  // Build createData with only allowed fields and correct types\n  const createData: Prisma.ContactsCreateInput = {\n    User: { connect: { id: userId } },\n  };\n  if (typeof data.phoneNumber === \"string\")\n    createData.phoneNumber = data.phoneNumber;\n  if (typeof data.emergencyContact === \"string\")\n    createData.emergencyContact = data.emergencyContact;\n  if (typeof data.emergencyContactNumber === \"string\")\n    createData.emergencyContactNumber = data.emergencyContactNumber;\n  // Only include defined fields in update\n  const updateData: Partial<Prisma.ContactsUpdateInput> = {};\n  if (typeof data.phoneNumber === \"string\")\n    updateData.phoneNumber = data.phoneNumber;\n  if (typeof data.emergencyContact === \"string\")\n    updateData.emergencyContact = data.emergencyContact;\n  if (typeof data.emergencyContactNumber === \"string\")\n    updateData.emergencyContactNumber = data.emergencyContactNumber;\n  return prisma.contacts.upsert({\n    where: { userId },\n    update: updateData,\n    create: createData,\n  });\n}\n"]}