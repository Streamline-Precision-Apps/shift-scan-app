{"version":3,"file":"formsService.js","sources":["src/services/formsService.ts"],"sourceRoot":"/","sourcesContent":["import prisma from \"../lib/prisma.js\";\nimport { FormStatus } from \"../../generated/prisma/client.js\";\n\n// --- Types ---\n\n// Params for ServiceGetEmployeeRequests\nexport interface GetEmployeeRequestsParams {\n  filter: string;\n  skip: number;\n  take: number;\n  managerId: string;\n}\n\nexport interface CreateFormSubmissionParams {\n  formTemplateId: string;\n  userId: string;\n}\n\nexport interface SaveDraftParams {\n  formData: Record<string, string>;\n  formTemplateId: string;\n  userId: string;\n  formType?: string;\n  submissionId?: number;\n  title?: string;\n}\n\nexport interface SaveDraftToPendingParams {\n  formData: Record<string, string>;\n  isApprovalRequired: boolean;\n  formTemplateId: string;\n  userId: string;\n  formType?: string;\n  submissionId?: number;\n  title?: string;\n}\n\nexport interface SavePendingParams {\n  formData: Record<string, string>;\n  formTemplateId: string;\n  userId: string;\n  formType?: string;\n  submissionId?: number;\n  title?: string;\n}\n\nexport interface CreateFormApprovalParams {\n  formSubmissionId: number;\n  signedBy: string;\n  signature: string;\n  comment: string;\n  approval: string;\n}\n\nexport interface UpdateFormApprovalParams {\n  id: string;\n  formSubmissionId: number;\n  comment: string;\n  isApproved: boolean;\n}\n\n/**\n * Get all forms\n * @returns {\n *   id: string;\n *   name: string;\n * }[]\n */\nexport const ServiceGetForms = async () => {\n  return await prisma.formTemplate.findMany({\n    where: {\n      isActive: \"ACTIVE\",\n    },\n    select: {\n      id: true,\n      name: true,\n    },\n  });\n};\n/**\n * Create a form submission\n * @param {Object} params\n * @param {string} params.formTemplateId\n * @param {string} params.userId\n */\nexport const ServiceCreateFormSubmission = async ({\n  formTemplateId,\n  userId,\n}: CreateFormSubmissionParams) => {\n  // Fetch the form template to get the field names\n  const formTemplate = await prisma.formTemplate.findUnique({\n    where: { id: formTemplateId },\n    include: {\n      FormGrouping: {\n        include: {\n          Fields: true,\n        },\n      },\n    },\n  });\n  if (!formTemplate) throw new Error(\"Form template not found\");\n  // Initialize the data object with field.id as keys and field.content as default value\n  const initialData: Record<string, string> = {};\n  for (const group of formTemplate.FormGrouping) {\n    for (const field of group.Fields) {\n      initialData[String(field.id)] = field.content || \"\";\n    }\n  }\n  // Create the form submission with the initialized data\n  const submission = await prisma.formSubmission.create({\n    data: {\n      formTemplateId,\n      userId,\n      title: \"\",\n      data: initialData,\n    },\n  });\n  return submission;\n};\n\n/**\n * Delete a form submission\n * @param {number} id\n */\nexport const ServiceDeleteFormSubmission = async (id: number) => {\n  await prisma.formSubmission.delete({ where: { id } });\n  return true;\n};\n\n/**\n * Save a draft form submission\n * @param {Object} params\n * @param {Record<string, string>} params.formData\n * @param {string} params.formTemplateId\n * @param {string} params.userId\n * @param {string} [params.formType]\n * @param {number} [params.submissionId]\n * @param {string} [params.title]\n */\nexport const ServiceSaveDraft = async (params: SaveDraftParams) => {\n  const { formData, formTemplateId, userId, formType, submissionId, title } =\n    params;\n  if (submissionId) {\n    const existingSubmission = await prisma.formSubmission.findUnique({\n      where: { id: submissionId },\n    });\n    if (!existingSubmission) throw new Error(\"Submission not found\");\n    let existingData: Record<string, string> = {};\n    if (\n      typeof existingSubmission.data === \"object\" &&\n      existingSubmission.data !== null &&\n      !Array.isArray(existingSubmission.data)\n    ) {\n      existingData = existingSubmission.data as Record<string, string>;\n    }\n    const existingTitle = existingSubmission.title;\n    // Only update changed fields\n    const changedFields: Record<string, string> = {};\n    for (const key in formData) {\n      if (formData[key] !== existingData[key]) {\n        changedFields[key] = formData[key] ?? \"\";\n      }\n    }\n    const updatedSubmission = await prisma.formSubmission.update({\n      where: { id: submissionId },\n      data: {\n        title: title || existingTitle,\n        data: { ...existingData, ...changedFields },\n      },\n    });\n    return updatedSubmission;\n  } else {\n    const newSubmission = await prisma.formSubmission.create({\n      data: {\n        title: title || \"\",\n        formTemplateId,\n        userId,\n        formType: formType ?? null,\n        data: formData,\n        status: FormStatus.DRAFT,\n        submittedAt: new Date().toISOString(),\n      },\n    });\n    return newSubmission;\n  }\n};\n\n/**\n * Save a draft and move to pending/approved\n * @param {Object} params\n * @param {Record<string, string>} params.formData\n * @param {boolean} params.isApprovalRequired\n * @param {string} params.formTemplateId\n * @param {string} params.userId\n * @param {string} [params.formType]\n * @param {number} [params.submissionId]\n * @param {string} [params.title]\n */\nexport const ServiceSaveDraftToPending = async (\n  params: SaveDraftToPendingParams\n) => {\n  const {\n    formData,\n    isApprovalRequired,\n    formTemplateId,\n    userId,\n    formType,\n    submissionId,\n    title,\n  } = params;\n  if (submissionId) {\n    const existingSubmission = await prisma.formSubmission.findUnique({\n      where: { id: submissionId },\n    });\n    if (!existingSubmission) throw new Error(\"Submission not found\");\n    let existingData: Record<string, string> = {};\n    if (\n      typeof existingSubmission.data === \"object\" &&\n      existingSubmission.data !== null &&\n      !Array.isArray(existingSubmission.data)\n    ) {\n      existingData = existingSubmission.data as Record<string, string>;\n    }\n    const existingTitle = existingSubmission.title;\n    const changedFields: Record<string, string> = {};\n    for (const key in formData) {\n      if (formData[key] !== existingData[key]) {\n        changedFields[key] = formData[key] ?? \"\";\n      }\n    }\n    const updatedSubmission = await prisma.formSubmission.update({\n      where: { id: submissionId },\n      data: {\n        title: title || existingTitle,\n        data: { ...existingData, ...changedFields },\n        submittedAt: new Date().toISOString(),\n        status: isApprovalRequired ? FormStatus.PENDING : FormStatus.APPROVED,\n      },\n      include: {\n        User: { select: { firstName: true, lastName: true } },\n      },\n    });\n    return updatedSubmission;\n  } else {\n    const newSubmission = await prisma.formSubmission.create({\n      data: {\n        title: title || \"\",\n        formTemplateId,\n        userId,\n        formType: formType ?? null,\n        data: formData,\n        status: isApprovalRequired ? FormStatus.PENDING : FormStatus.APPROVED,\n        submittedAt: new Date().toISOString(),\n      },\n      include: {\n        User: { select: { firstName: true, lastName: true } },\n      },\n    });\n    return newSubmission;\n  }\n};\n\n/**\n * Save a pending form submission\n * @param {Object} params\n * @param {Record<string, string>} params.formData\n * @param {string} params.formTemplateId\n * @param {string} params.userId\n * @param {string} [params.formType]\n * @param {number} [params.submissionId]\n * @param {string} [params.title]\n */\nexport const ServiceSavePending = async (params: SavePendingParams) => {\n  const { formData, formTemplateId, userId, formType, submissionId, title } =\n    params;\n  if (submissionId) {\n    const existingSubmission = await prisma.formSubmission.findUnique({\n      where: { id: submissionId },\n    });\n    if (!existingSubmission) throw new Error(\"Submission not found\");\n    let existingData: Record<string, string> = {};\n    if (\n      typeof existingSubmission.data === \"object\" &&\n      existingSubmission.data !== null &&\n      !Array.isArray(existingSubmission.data)\n    ) {\n      existingData = existingSubmission.data as Record<string, string>;\n    }\n    const existingTitle = existingSubmission.title;\n    const changedFields: Record<string, string> = {};\n    for (const key in formData) {\n      if (formData[key] !== existingData[key]) {\n        changedFields[key] = formData[key] ?? \"\";\n      }\n    }\n    const updatedSubmission = await prisma.formSubmission.update({\n      where: { id: submissionId },\n      data: {\n        title: title || existingTitle,\n        data: { ...existingData, ...changedFields },\n        status: FormStatus.PENDING,\n      },\n    });\n    return updatedSubmission;\n  } else {\n    const newSubmission = await prisma.formSubmission.create({\n      data: {\n        title: title || \"\",\n        formTemplateId,\n        userId,\n        formType: formType ?? null,\n        data: formData,\n        status: FormStatus.PENDING,\n      },\n    });\n    return newSubmission;\n  }\n};\n\nexport const ServiceGetFormsWithRequests = async () => {\n  const forms = await prisma.formSubmission.findMany({\n    where: { status: FormStatus.PENDING },\n    include: {\n      User: { select: { firstName: true, lastName: true } },\n    },\n  });\n  return forms;\n};\n\n/**\n * Create a form approval\n * @param {Object} params\n * @param {number} params.formSubmissionId\n * @param {string} params.signedBy\n * @param {string} params.signature\n * @param {string} params.comment\n * @param {string} params.approval\n */\nexport const ServiceCreateFormApproval = async (\n  params: CreateFormApprovalParams\n) => {\n  const { formSubmissionId, signedBy, signature, comment, approval } = params;\n  const create = await prisma.formApproval.create({\n    data: {\n      formSubmissionId,\n      signedBy,\n      signature,\n      comment,\n    },\n  });\n  if (create) {\n    await prisma.formSubmission.update({\n      where: { id: formSubmissionId },\n      data: { status: approval as FormStatus },\n    });\n  }\n  return true;\n};\n\n/**\n * Update a form approval\n * @param {Object} params\n * @param {string} params.id\n * @param {number} params.formSubmissionId\n * @param {string} params.comment\n * @param {boolean} params.isApproved\n */\nexport const ServiceUpdateFormApproval = async (\n  params: UpdateFormApprovalParams\n) => {\n  const { id, formSubmissionId, comment, isApproved } = params;\n  // Use a transaction to ensure atomicity\n  const [approval, updatedSubmission] = await prisma.$transaction([\n    prisma.formApproval.update({\n      where: { id },\n      data: { comment },\n    }),\n    prisma.formSubmission.update({\n      where: { id: formSubmissionId },\n      data: { status: isApproved ? FormStatus.APPROVED : FormStatus.DENIED },\n    }),\n  ]);\n  return { approval, updatedSubmission };\n};\n\n/**\n * Fetch employee requests for a manager, with filter, skip, take\n */\nexport const ServiceGetEmployeeRequests = async ({\n  filter,\n  skip,\n  take,\n  managerId,\n}: GetEmployeeRequestsParams) => {\n  // 'all' = all pending requests for employees in manager's team (not self),\n  // 'approved' = all approved/denied (not pending/draft) for employees in manager's team (not self),\n  // else: pending requests for a specific userId (employee), in manager's team (not self)\n  if (filter === \"all\") {\n    return await prisma.formSubmission.findMany({\n      where: {\n        status: \"PENDING\",\n        User: {\n          NOT: { id: managerId },\n          Crews: { some: { leadId: managerId } },\n        },\n        Approvals: { none: {} },\n      },\n      include: {\n        FormTemplate: { select: { formType: true } },\n        User: { select: { id: true, firstName: true, lastName: true } },\n        Approvals: { select: { signedBy: true } },\n      },\n      skip,\n      take,\n      orderBy: { createdAt: \"desc\" },\n    });\n  } else if (filter === \"approved\") {\n    return await prisma.formSubmission.findMany({\n      where: {\n        status: { not: { in: [\"PENDING\", \"DRAFT\"] } },\n        User: {\n          NOT: { id: managerId },\n          Crews: { some: { leadId: managerId } },\n        },\n      },\n      include: {\n        FormTemplate: { select: { formType: true } },\n        User: { select: { firstName: true, lastName: true } },\n        Approvals: {\n          select: {\n            id: true,\n            Approver: { select: { firstName: true, lastName: true } },\n          },\n        },\n      },\n      skip,\n      take,\n      orderBy: { createdAt: \"desc\" },\n    });\n  } else {\n    // filter is a userId\n    return await prisma.formSubmission.findMany({\n      where: {\n        status: \"PENDING\",\n        userId: filter,\n        User: {\n          NOT: { id: managerId },\n          Crews: { some: { leadId: managerId } },\n        },\n        Approvals: { none: {} },\n      },\n      include: {\n        FormTemplate: { select: { formType: true } },\n        User: { select: { firstName: true, lastName: true } },\n        Approvals: { select: { signedBy: true } },\n      },\n      skip,\n      take,\n      orderBy: { createdAt: \"desc\" },\n    });\n  }\n};\n\n\nexport const ServiceGetUserSubmissions = async ({\n  userId,\n  status,\n  startDate,\n  endDate,\n  skip,\n  take,\n}: {\n  userId: string;\n  status: string;\n  startDate: Date | null;\n  endDate: Date | null;\n  skip: number;\n  take: number;\n}) => {\n  // Build where clause\n  let whereClause: any = { userId };\n  if (status === \"pending\") {\n    whereClause = { ...whereClause, status: FormStatus.PENDING };\n  } else if (status === \"approved\") {\n    whereClause = { ...whereClause, status: FormStatus.APPROVED };\n  } else if (status === \"denied\") {\n    whereClause = { ...whereClause, status: FormStatus.DENIED };\n  } else if (status === \"draft\") {\n    whereClause = { ...whereClause, status: FormStatus.DRAFT };\n  } else if (status === \"all\") {\n    if (startDate && endDate) {\n      whereClause = { ...whereClause, createdAt: { gte: startDate, lte: endDate } };\n    }\n  }\n\n  const forms = await prisma.formSubmission.findMany({\n    where: whereClause,\n    include: {\n      FormTemplate: { select: { name: true, formType: true } },\n      User: { select: { id: true, firstName: true, lastName: true } },\n    },\n    skip,\n    take,\n    orderBy: { createdAt: \"desc\" },\n  });\n\n  // Sort: drafts first, then by createdAt desc\n  forms.sort((a, b) => {\n    if (a.status === FormStatus.DRAFT && b.status !== FormStatus.DRAFT) return -1;\n    if (a.status !== FormStatus.DRAFT && b.status === FormStatus.DRAFT) return 1;\n    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n  });\n  return forms;\n};"],"names":[],"mappings":"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","debug_id":"05f6a391-ac69-5477-be36-5093e93be20a"}