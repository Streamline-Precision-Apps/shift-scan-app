{"version":3,"file":"equipmentService.js","sourceRoot":"/","sources":["src/services/equipmentService.ts"],"names":[],"mappings":"AAAA,0CAA0C;AAC1C,OAAO,MAAM,MAAM,kBAAkB,CAAC;AACtC,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AAEhF,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,KAAwB;IACzD,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;QACd,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;YAC/B,KAAK,EAAE;gBACL,MAAM,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE;aAC5B;YACD,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,IAAI;aACb;SACF,CAAC,CAAC;IACL,CAAC;SAAM,CAAC;QACN,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;AACH,CAAC;AAED,8DAA8D;AAC9D,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,IAAY;IACnD,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACxE,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,SAAS,CAAC,CAAC;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,0BAA0B;AAC1B,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,IASrC;IACC,MAAM,EACJ,aAAa,EACb,WAAW,EACX,YAAY,EACZ,IAAI,EACJ,cAAc,EACd,WAAW,EACX,IAAI,EACJ,WAAW,GAAG,EAAE,GACjB,GAAG,IAAI,CAAC;IAET,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAED,uCAAuC;IACvC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QACxD,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;YACjD,IAAI,EAAE;gBACJ,IAAI;gBACJ,IAAI;gBACJ,MAAM,EAAE,QAAQ;gBAChB,WAAW;gBACX,cAAc;gBACd,YAAY,EAAE,YAA6B,EAAE,wBAAwB;gBACrE,WAAW;gBACX,aAAa,EAAE,aAA8B,EAAE,wBAAwB;aACxE;YACD,OAAO,EAAE;gBACP,SAAS,EAAE;oBACT,MAAM,EAAE;wBACN,SAAS,EAAE,IAAI;wBACf,QAAQ,EAAE,IAAI;qBACf;iBACF;aACF;SACF,CAAC,CAAC;QAEH,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;gBAClC,IAAI,EAAE;oBACJ,WAAW,EAAE,YAAY,CAAC,EAAE;oBAC5B,WAAW;iBACZ;aACF,CAAC,CAAC;QACL,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// server/src/services/equipmentService.ts\nimport prisma from \"../lib/prisma.js\";\nimport { EquipmentTags, OwnershipType } from \"../../generated/prisma/client.js\";\n\nexport async function getEquipment(query: { qrg?: boolean }) {\n  if (query.qrg) {\n    return prisma.equipment.findMany({\n      where: {\n        status: { not: \"ARCHIVED\" },\n      },\n      select: {\n        id: true,\n        qrId: true,\n        name: true,\n        code: true,\n        status: true,\n      },\n    });\n  } else {\n    return prisma.equipment.findMany();\n  }\n}\n\n// Find an equipment by QR code (for QR code uniqueness check)\nexport async function getEquipmentByQrId(qrId: string) {\n  const equipment = await prisma.equipment.findFirst({ where: { qrId } });\n  console.log(\"Equipment found by QR ID:\", equipment);\n  return equipment;\n}\n\n// Create equipment (POST)\nexport async function createEquipment(data: {\n  ownershipType: string;\n  createdById: string;\n  equipmentTag: string;\n  name: string;\n  creationReason: string;\n  destination?: string;\n  qrId: string;\n  description?: string;\n}) {\n  const {\n    ownershipType,\n    createdById,\n    equipmentTag,\n    name,\n    creationReason,\n    destination,\n    qrId,\n    description = \"\",\n  } = data;\n\n  if (!equipmentTag) {\n    throw new Error(\"Please select an equipment tag.\");\n  }\n\n  // Transaction for equipment and hauled\n  const result = await prisma.$transaction(async (prisma) => {\n    const newEquipment = await prisma.equipment.create({\n      data: {\n        qrId,\n        name,\n        status: \"ACTIVE\",\n        description,\n        creationReason,\n        equipmentTag: equipmentTag as EquipmentTags, // Cast to EquipmentTags\n        createdById,\n        ownershipType: ownershipType as OwnershipType, // Cast to OwnershipType\n      },\n      include: {\n        createdBy: {\n          select: {\n            firstName: true,\n            lastName: true,\n          },\n        },\n      },\n    });\n\n    if (destination) {\n      await prisma.equipmentHauled.create({\n        data: {\n          equipmentId: newEquipment.id,\n          destination,\n        },\n      });\n    }\n\n    return newEquipment;\n  });\n\n  return result;\n}\n"]}