{"version":3,"file":"User.js","sources":["src/models/User.ts"],"sourceRoot":"/","sourcesContent":["import prisma from \"../lib/prisma.js\";\nimport type { User, Prisma } from \"../../generated/prisma/index.js\";\n\n// Use Prisma generated types\ntype CreateUserData = Prisma.UserCreateInput;\ntype UpdateUserData = Prisma.UserUpdateInput;\n\n// You can also create more specific types if needed\ntype UserWithCompany = Prisma.UserGetPayload<{\n  include: { Company: true }\n}>;\n\ntype UserCreateManyData = Prisma.UserCreateManyInput;\n\nexport class UserModel {\n  // Get all users\n  static async findAll(): Promise<User[]> {\n    return await prisma.user.findMany({\n      orderBy: { startDate: \"desc\" },\n    });\n  }\n\n  // Get all users with company info\n  static async findAllWithCompany(): Promise<UserWithCompany[]> {\n    return await prisma.user.findMany({\n      include: { Company: true },\n      orderBy: { startDate: \"desc\" },\n    });\n  }\n\n  // Get user by ID\n  static async findById(id: string): Promise<User | null> {\n    return await prisma.user.findUnique({\n      where: { id },\n    });\n  }\n\n  // Get user by ID with relations\n  static async findByIdWithRelations(id: string): Promise<UserWithCompany | null> {\n    return await prisma.user.findUnique({\n      where: { id },\n      include: { Company: true },\n    });\n  }\n\n  // Get user by email\n  static async findByEmail(email: string): Promise<User | null> {\n    return await prisma.user.findUnique({\n      where: { email },\n    });\n  }\n\n  // Get user by username\n  static async findByUsername(username: string): Promise<User | null> {\n    return await prisma.user.findUnique({\n      where: { username },\n    });\n  }\n\n  // Create a new user\n  static async create(data: CreateUserData): Promise<User> {\n    return await prisma.user.create({\n      data,\n    });\n  }\n\n  // Update user\n  static async update(id: string, data: UpdateUserData): Promise<User> {\n    return await prisma.user.update({\n      where: { id },\n      data,\n    });\n  }\n\n  // Delete user\n  static async delete(id: string): Promise<User> {\n    return await prisma.user.delete({\n      where: { id },\n    });\n  }\n}\n\nexport default UserModel;\n"],"names":[],"mappings":";;AAAA,OAAO,MAAM,MAAM,kBAAkB,CAAC;AActC,MAAM,OAAO,SAAS;IACpB,gBAAgB;IAChB,MAAM,CAAC,KAAK,CAAC,OAAO;QAClB,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChC,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;SAC/B,CAAC,CAAC;IACL,CAAC;IAED,kCAAkC;IAClC,MAAM,CAAC,KAAK,CAAC,kBAAkB;QAC7B,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;YAC1B,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;SAC/B,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB;IACjB,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAU;QAC9B,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;IACL,CAAC;IAED,gCAAgC;IAChC,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,EAAU;QAC3C,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB;IACpB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAa;QACpC,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,KAAK,EAAE,EAAE,KAAK,EAAE;SACjB,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB;IACvB,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,QAAgB;QAC1C,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,KAAK,EAAE,EAAE,QAAQ,EAAE;SACpB,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB;IACpB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAoB;QACtC,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAED,cAAc;IACd,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAoB;QAClD,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAED,cAAc;IACd,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAU;QAC5B,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,KAAK,EAAE,EAAE,EAAE,EAAE;SACd,CAAC,CAAC;IACL,CAAC;CACF;AAED,eAAe,SAAS,CAAC","debug_id":"2cd14a47-0412-51bb-83ba-c508933529db"}