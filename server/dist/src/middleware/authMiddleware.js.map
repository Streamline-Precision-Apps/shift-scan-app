{"version":3,"file":"authMiddleware.js","sourceRoot":"/","sources":["src/middleware/authMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,MAAM,MAAM,kBAAkB,CAAC;AAOtC,MAAM,UAAU,WAAW,CACzB,GAAyB,EACzB,GAAqB,EACrB,IAA0B;IAE1B,6EAA6E;IAC7E,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAuB,CAAC;IACtE,IAAI,KAAyB,CAAC;IAE9B,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;QACnD,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;SAAM,IAAK,GAAW,CAAC,OAAO,IAAK,GAAW,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC9D,KAAK,GAAI,GAAW,CAAC,OAAO,CAAC,KAAK,CAAC;IACrC,CAAC;IAED,IAAI,CAAC,KAAK;QAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAC;IAE1E,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAmB,CAAC;QACtE,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC;QACnB,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,0BAA0B,EAAE,CAAC,CAAC;IAChE,CAAC;AACH,CAAC;AAED,+BAA+B;AAC/B,MAAM,UAAU,cAAc,CAC5B,GAAG,YAA6D;IAEhE,OAAO,CACL,GAAyB,EACzB,GAAqB,EACrB,IAA0B,EAC1B,EAAE;QACF,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,0DAA0D;QAE1D,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../lib/config.js\";\nimport type { JwtUserPayload } from \"../lib/jwt.js\";\n\nexport interface AuthenticatedRequest extends express.Request {\n  user?: JwtUserPayload;\n}\n\nexport function verifyToken(\n  req: AuthenticatedRequest,\n  res: express.Response,\n  next: express.NextFunction\n) {\n  // Check Authorization header first (Bearer <token>) then fall back to cookie\n  const authHeader = req.headers[\"authorization\"] as string | undefined;\n  let token: string | undefined;\n\n  if (authHeader && authHeader.startsWith(\"Bearer \")) {\n    token = authHeader.split(\" \")[1];\n  } else if ((req as any).cookies && (req as any).cookies.token) {\n    token = (req as any).cookies.token;\n  }\n\n  if (!token) return res.status(401).json({ message: \"No token provided\" });\n\n  try {\n    const decoded = jwt.verify(token, config.jwtSecret) as JwtUserPayload;\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n}\n\n// middleware/authMiddleware.js\nexport function authorizeRoles(\n  ...allowedRoles: (\"USER\" | \"MANAGER\" | \"ADMIN\" | \"SUPERADMIN\")[]\n) {\n  return (\n    req: AuthenticatedRequest,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    // Permission check removed: JWT only contains user ID now\n\n    next();\n  };\n}\n"]}