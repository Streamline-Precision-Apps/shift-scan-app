{"version":3,"file":"index.js","sourceRoot":"/","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"./instrument.mjs\";\nimport * as Sentry from \"@sentry/node\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport helmet from \"helmet\";\nimport morgan from \"morgan\";\nimport cookieParser from \"cookie-parser\";\nimport swaggerUi from \"swagger-ui-express\";\nimport prisma from \"./lib/prisma.js\";\nimport config from \"./lib/config.js\";\nimport { swaggerSpec } from \"./lib/swagger.js\";\nimport apiRoutes from \"./routes/index.js\";\nimport {\n  errorHandler,\n  notFoundHandler,\n  validateJsonMiddleware,\n} from \"./middleware/errorMiddleware.js\";\nimport authRoutes from \"./routes/authRoutes.js\";\n\nasync function main() {\n  console.log(\"🚀 Server starting...\");\n\n  try {\n    // Test database connection\n    await prisma.$connect();\n    console.log(\"✅ Database connected successfully\");\n\n    // Create Express app\n    const app = express();\n\n    // Security middleware\n    app.use(helmet());\n\n    // CORS middleware\n    app.use(\n      cors({\n        origin: process.env.CORS_ORIGIN || \"http://localhost:3000\",\n        credentials: true,\n        methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n        allowedHeaders: [\"Content-Type\", \"Authorization\"],\n        exposedHeaders: [\"Set-Cookie\"],\n      })\n    );\n\n    // Cookie parser (required to read httpOnly cookies)\n    app.use(cookieParser());\n\n    // Logging middleware\n    app.use(morgan(\"combined\"));\n\n    // Body parsing middleware\n    app.use(express.json({ limit: \"10mb\" }));\n    app.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n    // JSON validation middleware\n    app.use(validateJsonMiddleware);\n\n    // Auth middleware\n    app.use(\"/auth\", authRoutes);\n\n    app.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n    // Root route\n    app.get(\"/\", function rootHandler(req, res) {\n      res.end(\"Welcome to the Shift Scan API!\");\n    });\n\n    // API routes\n    app.use(\"/api\", apiRoutes);\n\n    // The error handler must be registered before any other error middleware and after all controllers\n    Sentry.setupExpressErrorHandler(app);\n\n    // 404 handler\n    app.use(notFoundHandler);\n\n    // Error handling middleware (must be last)\n    app.use(errorHandler);\n\n    // Start server\n    const server = app.listen(config.port, () => {\n      console.log(`🌟 Server is running on port ${config.port}`);\n      console.log(\n        `📖 API documentation available at http://localhost:${config.port}/api-docs`\n      );\n    });\n\n    // Handle server shutdown\n    const gracefulShutdown = async (signal: string) => {\n      console.log(`\\n🔄 Received ${signal}, shutting down gracefully...`);\n      server.close(async () => {\n        await prisma.$disconnect();\n        console.log(\"✅ Server closed successfully\");\n        process.exit(0);\n      });\n    };\n\n    process.on(\"SIGINT\", () => gracefulShutdown(\"SIGINT\"));\n    process.on(\"SIGTERM\", () => gracefulShutdown(\"SIGTERM\"));\n  } catch (error) {\n    console.error(\"❌ Failed to start server:\", error);\n    await prisma.$disconnect();\n    process.exit(1);\n  }\n}\n\nmain().catch(async (error) => {\n  console.error(\"💥 Server crashed:\", error);\n  await prisma.$disconnect();\n  process.exit(1);\n});\n"]}