{"version":3,"file":"tokenController.js","sourceRoot":"/","sources":["src/controllers/tokenController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthenticatedRequest } from \"../middleware/authMiddleware.js\";\nimport type { Request, Response } from \"express\";\nimport prisma from \"../lib/prisma.js\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { sendPasswordResetEmail } from \"../lib/mail.js\";\n\nexport async function saveFCMToken(req: AuthenticatedRequest, res: Response) {\n  const userId = req.user?.id; // assuming verifyToken middleware sets req.user\n  const { token } = req.body;\n\n  if (!userId) {\n    return res\n      .status(401)\n      .json({ success: false, error: \"No authenticated user\" });\n  }\n  if (!token) {\n    return res.status(400).json({ success: false, error: \"No token provided\" });\n  }\n\n  try {\n    await prisma.fCMToken.deleteMany({ where: { userId } });\n    await prisma.fCMToken.create({\n      data: {\n        token,\n        userId,\n        platform: \"web\",\n        lastUsedAt: new Date(),\n        isValid: true,\n      },\n    });\n    return res.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving FCM token:\", error);\n    return res\n      .status(500)\n      .json({ success: false, error: \"Failed to save FCM token\" });\n  }\n}\n\n/**\n * POST /api/tokens/password-reset\n * Request password reset email by providing an email address\n */\nexport async function requestPasswordReset(req: Request, res: Response) {\n  try {\n    const { email } = req.body;\n\n    if (!email) {\n      console.warn(\"‚ùå Password reset request: Missing email\");\n      return res.status(400).json({ error: \"Email is required\" });\n    }\n\n    // Check if user exists\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      console.warn(\n        `‚ùå Password reset request: User not found for email: ${email}`\n      );\n      // Don't reveal if email exists or not (security best practice)\n      return res.status(200).json({\n        success: true,\n        message:\n          \"If an account exists with this email, a reset link will be sent.\",\n      });\n    }\n\n    console.log(`üìß Processing password reset for: ${email}`);\n\n    // Delete any existing tokens for this email\n    const existingToken = await prisma.passwordResetToken.findFirst({\n      where: { email },\n    });\n\n    if (existingToken) {\n      await prisma.passwordResetToken.delete({\n        where: { id: existingToken.id },\n      });\n      console.log(`üóëÔ∏è  Deleted existing token for: ${email}`);\n    }\n\n    // Generate new reset token\n    const resetToken = uuidv4();\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n    const passwordResetToken = await prisma.passwordResetToken.create({\n      data: {\n        email,\n        token: resetToken,\n        expiration: expiresAt,\n      },\n    });\n\n    console.log(`‚úÖ Password reset token created:`, {\n      email,\n      tokenId: passwordResetToken.id,\n      expiresAt: expiresAt.toISOString(),\n    });\n\n    // Send reset email\n    try {\n      await sendPasswordResetEmail(email, resetToken);\n      console.log(`üì® Password reset email sent to: ${email}`);\n    } catch (emailError) {\n      console.error(\n        `‚ùå Failed to send password reset email to ${email}:`,\n        emailError\n      );\n      // Delete the token if email fails to send\n      await prisma.passwordResetToken.delete({\n        where: { id: passwordResetToken.id },\n      });\n      return res.status(500).json({\n        error: \"Failed to send reset email. Please try again.\",\n      });\n    }\n\n    return res.status(200).json({\n      success: true,\n      message:\n        \"If an account exists with this email, a reset link will be sent.\",\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error in requestPasswordReset:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n}\n\n/**\n * POST /api/tokens/reset-password\n * Reset user password using the reset token\n */\nexport async function resetPassword(req: Request, res: Response) {\n  try {\n    const { token, password } = req.body;\n\n    if (!token || !password) {\n      console.warn(\"‚ùå Reset password: Missing token or password\");\n      return res.status(400).json({ error: \"Token and password are required\" });\n    }\n\n    if (password.length < 6) {\n      return res\n        .status(400)\n        .json({ error: \"Password must be at least 6 characters\" });\n    }\n\n    console.log(`üîç Verifying password reset token...`);\n\n    // Find and validate token\n    const resetTokenRecord = await prisma.passwordResetToken.findUnique({\n      where: { token },\n    });\n\n    if (!resetTokenRecord) {\n      console.warn(`‚ùå Invalid password reset token: ${token}`);\n      return res.status(400).json({ error: \"Invalid or expired reset token\" });\n    }\n\n    // Check if token is expired\n    if (resetTokenRecord.expiration < new Date()) {\n      console.warn(\n        `‚ùå Password reset token expired for: ${resetTokenRecord.email}`\n      );\n      // Delete expired token\n      await prisma.passwordResetToken.delete({\n        where: { id: resetTokenRecord.id },\n      });\n      return res.status(400).json({ error: \"Reset token has expired\" });\n    }\n\n    console.log(`‚úÖ Token valid for email: ${resetTokenRecord.email}`);\n\n    // Find user\n    const user = await prisma.user.findUnique({\n      where: { email: resetTokenRecord.email },\n    });\n\n    if (!user) {\n      console.warn(`‚ùå User not found for email: ${resetTokenRecord.email}`);\n      return res.status(400).json({ error: \"User not found\" });\n    }\n\n    // Update password (you should hash this - see note below)\n    console.log(`üîê Updating password for user: ${user.id}`);\n\n    await prisma.user.update({\n      where: { id: user.id },\n      data: { password }, // ‚ö†Ô∏è TODO: Hash password before storing\n    });\n\n    // Delete used token\n    await prisma.passwordResetToken.delete({\n      where: { id: resetTokenRecord.id },\n    });\n\n    console.log(`‚úÖ Password reset successful for: ${resetTokenRecord.email}`);\n\n    return res.status(200).json({\n      success: true,\n      message:\n        \"Password reset successfully. Please sign in with your new password.\",\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error in resetPassword:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n}\n\n/**\n * GET /api/tokens/verify-reset-token/:token\n * Verify if a reset token is valid\n */\nexport async function verifyResetToken(req: Request, res: Response) {\n  try {\n    const { token } = req.params;\n\n    if (!token) {\n      return res.status(400).json({ error: \"Token is required\" });\n    }\n\n    console.log(`üîç Verifying reset token...`);\n\n    const resetTokenRecord = await prisma.passwordResetToken.findUnique({\n      where: { token },\n    });\n\n    if (!resetTokenRecord) {\n      console.warn(`‚ùå Invalid token: ${token}`);\n      return res.status(400).json({ valid: false, error: \"Invalid token\" });\n    }\n\n    if (resetTokenRecord.expiration < new Date()) {\n      console.warn(`‚ùå Token expired: ${token}`);\n      await prisma.passwordResetToken.delete({\n        where: { id: resetTokenRecord.id },\n      });\n      return res.status(400).json({ valid: false, error: \"Token expired\" });\n    }\n\n    console.log(`‚úÖ Token valid`);\n    return res.status(200).json({\n      valid: true,\n      email: resetTokenRecord.email,\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error verifying reset token:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n}\n\n/**\n * DELETE /api/tokens/reset/:token\n * Delete a password reset token by token\n */\nexport async function deleteResetToken(req: Request, res: Response) {\n  try {\n    const { token } = req.params;\n\n    if (!token) {\n      console.warn(\"‚ùå Delete reset token: Missing token\");\n      return res.status(400).json({ error: \"Token is required\" });\n    }\n\n    console.log(`üóëÔ∏è  Attempting to delete reset token...`);\n\n    // Find the token record\n    const resetTokenRecord = await prisma.passwordResetToken.findUnique({\n      where: { token },\n    });\n\n    if (!resetTokenRecord) {\n      console.warn(`‚ùå Reset token not found: ${token}`);\n      return res.status(404).json({ error: \"Token not found\" });\n    }\n\n    // Delete the token\n    await prisma.passwordResetToken.delete({\n      where: { id: resetTokenRecord.id },\n    });\n\n    console.log(\n      `‚úÖ Reset token deleted successfully for email: ${resetTokenRecord.email}`\n    );\n\n    return res.status(200).json({\n      success: true,\n      message: \"Token deleted successfully\",\n    });\n  } catch (error) {\n    console.error(\"‚ùå Error deleting reset token:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n}\n"]}