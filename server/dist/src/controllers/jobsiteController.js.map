{"version":3,"file":"jobsiteController.js","sourceRoot":"/","sources":["src/controllers/jobsiteController.ts"],"names":[],"mappings":"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","sourcesContent":["// server/src/controllers/jobsiteController.ts\nimport type { Request, Response } from \"express\";\nimport * as jobsiteService from \"../services/jobsiteService.js\";\n\nexport async function getJobsites(req: Request, res: Response) {\n  try {\n    const query = req.query;\n    const jobsites = await jobsiteService.getJobsites(query);\n    res.json(jobsites);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch jobsites\" });\n  }\n}\n\n// Get a jobsite by QR code (for QR code uniqueness check)\nexport async function getJobsiteByQrId(req: Request, res: Response) {\n  try {\n    const { qrId } = req.params;\n    if (!qrId) {\n      return res.status(400).json({ error: \"Invalid QR code\" });\n    }\n    const jobsite = await jobsiteService.getJobsiteByQrId(qrId);\n    if (!jobsite) {\n      return res.status(200).json({\n        available: true,\n        message: \"QR code is available and not in use.\",\n      });\n    }\n    res.json({ available: false, jobsite });\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch jobsite by QR code\" });\n  }\n}\n// Get a jobsite by ID\nexport async function getJobsiteById(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({ error: \"Invalid ID\" });\n    }\n    const jobsite = await jobsiteService.getJobsiteById(id);\n    if (!jobsite) return res.status(404).json({ error: \"Jobsite not found\" });\n    res.json(jobsite);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch jobsite\" });\n  }\n}\n\n// Create a jobsite\nexport async function createJobsite(req: Request, res: Response) {\n  try {\n    if (!req.body) {\n      return res.status(400).json({ error: \"Missing jobsite data\" });\n    }\n    console.log(\"Creating jobsite with data:\", req.body);\n    const jobsite = await jobsiteService.createJobsite(req.body);\n    res.status(201).json(jobsite);\n  } catch (error: any) {\n    if (\n      error instanceof Error &&\n      error.message &&\n      error.message.includes(\"already exists\")\n    ) {\n      return res.status(409).json({ error: error.message });\n    }\n    res.status(500).json({ error: \"Failed to create jobsite\" });\n  }\n}\n\n// Update a jobsite\nexport async function updateJobsite(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({ error: \"Missing jobsite ID\" });\n    }\n    const updated = await jobsiteService.updateJobsite(id, req.body);\n    if (!updated) return res.status(404).json({ error: \"Invalid ID\" });\n    res.json(updated);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to update jobsite\" });\n  }\n}\n\n// Delete a jobsite\nexport async function deleteJobsite(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({ error: \"Invalid ID\" });\n    }\n    const deleted = await jobsiteService.deleteJobsite(id);\n    if (!deleted) return res.status(404).json({ error: \"Jobsite not found\" });\n    res.json({ success: true });\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to delete jobsite\" });\n  }\n}\n"]}