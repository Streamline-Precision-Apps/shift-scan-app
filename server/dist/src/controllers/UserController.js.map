{"version":3,"file":"userController.js","sourceRoot":"/","sources":["src/controllers/userController.ts"],"names":[],"mappings":"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","sourcesContent":["// GET /api/v1/user/settings (GET, by query param or header)\nimport type { Request, Response } from \"express\";\nimport type { User, Prisma } from \"../../generated/prisma/index.js\";\nimport * as UserService from \"../services/UserService.js\";\nimport prisma from \"../lib/prisma.js\";\n\nexport async function getUserSettingsByQuery(req: Request, res: Response) {\n  try {\n    // Accept userId from body (POST)\n    const userId = req.body.userId;\n    console.log(\"📝 getUserSettingsByQuery called with userId:\", userId);\n\n    if (!userId || typeof userId !== \"string\") {\n      console.log(\"❌ Invalid userId:\", userId);\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to retrieve user settings\",\n      });\n    }\n\n    // Only select the requested fields\n    const data = await prisma.userSettings.findUnique({\n      where: { userId },\n      select: {\n        userId: true,\n        language: true,\n        personalReminders: true,\n        generalReminders: true,\n        cameraAccess: true,\n        locationAccess: true,\n        cookiesAccess: true,\n      },\n    });\n\n    console.log(\"🔍 Found UserSettings:\", data);\n\n    if (!data) {\n      console.log(\"❌ UserSettings not found for userId:\", userId);\n      return res.status(404).json({\n        success: false,\n        error: \"User settings not found\",\n        message: \"No settings for this user\",\n      });\n    }\n    res.status(200).json({ success: true, data });\n  } catch (error) {\n    console.error(\"❌ Error in getUserSettingsByQuery:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to retrieve user settings\",\n    });\n  }\n}\n\n// GET /api/v1/user/contact (GET, by query param or header)\nexport async function getUserContact(req: Request, res: Response) {\n  try {\n    const userId = req.body.userId;\n    console.log(\"📝 getUserContact called with userId:\", userId);\n\n    if (!userId || typeof userId !== \"string\") {\n      console.log(\"❌ Invalid userId:\", userId);\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to retrieve user contact info\",\n      });\n    }\n\n    // Fetch employee details as requested\n    const employee = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        email: true,\n        image: true,\n        signature: true,\n        Contact: {\n          select: {\n            phoneNumber: true,\n            emergencyContact: true,\n            emergencyContactNumber: true,\n          },\n        },\n      },\n    });\n\n    console.log(\"🔍 Found employee:\", employee);\n\n    if (!employee) {\n      console.log(\"❌ User not found for userId:\", userId);\n      return res.status(404).json({\n        success: false,\n        error: \"User not found\",\n        message: \"No employee/contact info for this user\",\n      });\n    }\n    res.status(200).json({ success: true, data: employee });\n  } catch (error) {\n    console.error(\"❌ Error in getUserContact:\", error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to retrieve user contact info\",\n    });\n  }\n}\n\n// Type the request body for create/update operations\ninterface CreateUserRequestBody {\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  companyId: string;\n  email?: string | null;\n  signature?: string | null;\n  DOB?: string | null;\n  truckView: boolean;\n  tascoView: boolean;\n  laborView: boolean;\n  mechanicView: boolean;\n  permission?: string;\n  image?: string | null;\n  startDate?: string | null;\n  terminationDate?: string | null;\n  workTypeId?: string | null;\n  middleName?: string | null;\n  secondLastName?: string | null;\n}\n\ninterface CreateUserRequest extends Request {\n  body: CreateUserRequestBody;\n}\n\n// GET /api/users\nexport async function getUsers(req: Request, res: Response) {\n  try {\n    const users = await UserService.getAllUsers();\n    // Remove password from each user object\n    const safeUsers = users.map(({ password, ...rest }) => rest);\n    res.status(200).json({\n      success: true,\n      data: safeUsers,\n      message: \"Users retrieved successfully\",\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to retrieve users\",\n    });\n  }\n}\n\n// GET /api/users/:id || GET /api/users/:id?query\nexport async function getUserById(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    const { query } = req.query;\n\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to retrieve user\",\n      });\n    }\n    if (query) {\n      const user = await UserService.getUserByIdQuery(id, query as string);\n      res.status(200).json({\n        success: true,\n        data: user,\n        message: \"User retrieved successfully\",\n      });\n    } else {\n      const user = await UserService.getUserById(id);\n      // Remove password from user object\n      const { password, ...safeUser } = user || {};\n      res.status(200).json({\n        success: true,\n        data: safeUser,\n        message: \"User retrieved successfully\",\n      });\n    }\n  } catch (error) {\n    const statusCode =\n      error instanceof Error && error.message.includes(\"not found\") ? 404 : 500;\n    res.status(statusCode).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to retrieve user\",\n    });\n  }\n}\n\n// POST /api/users\nexport async function createUser(req: CreateUserRequest, res: Response) {\n  try {\n    // Convert request body to proper Prisma input\n    const userData = UserService.createUserWithCompanyId(\n      req.body as Prisma.UserCreateInput & { companyId: string }\n    );\n    const newUser: User = await UserService.createUser(userData);\n\n    // Additional action: log creation\n    console.log(`User created: ${newUser.id}`);\n\n    res.status(201).json({\n      success: true,\n      data: newUser,\n      message: \"User created successfully\",\n    });\n  } catch (error) {\n    const statusCode =\n      error instanceof Error && error.message.includes(\"already exists\")\n        ? 409\n        : 400;\n    res.status(statusCode).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to create user\",\n    });\n  }\n}\n\n// PUT /api/users/:id\nexport async function updateUser(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to update user\",\n      });\n    }\n    const userData = req.body;\n\n    // Convert string 'true'/'false' to boolean for accountSetup if present in body\n    if (userData.accountSetup !== undefined) {\n      if (userData.accountSetup === \"true\") userData.accountSetup = true;\n      else if (userData.accountSetup === \"false\") userData.accountSetup = false;\n    }\n\n    const updatedUser = await UserService.updateUser(id, userData);\n\n    // Additional action: log update\n    console.log(`User updated: ${id}`);\n\n    res.status(200).json({\n      success: true,\n      data: updatedUser,\n      message: \"User updated successfully\",\n    });\n  } catch (error) {\n    let statusCode = 500;\n    if (error instanceof Error) {\n      if (error.message.includes(\"not found\")) statusCode = 404;\n      else if (error.message.includes(\"already taken\")) statusCode = 409;\n      else if (\n        error.message.includes(\"required\") ||\n        error.message.includes(\"Invalid\")\n      )\n        statusCode = 400;\n    }\n    res.status(statusCode).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to update user\",\n    });\n  }\n}\n\n// DELETE /api/users/:id\nexport async function deleteUser(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to delete user\",\n      });\n    }\n    await UserService.deleteUser(id);\n\n    // Additional action: log deletion\n    console.log(`User deleted: ${id}`);\n\n    res.status(200).json({\n      success: true,\n      message: \"User deleted successfully\",\n    });\n  } catch (error) {\n    const statusCode =\n      error instanceof Error && error.message.includes(\"not found\") ? 404 : 500;\n    res.status(statusCode).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to delete user\",\n    });\n  }\n}\n\n// GET /api/user/settings\nexport async function getUserSettings(req: Request, res: Response) {\n  try {\n    const userId = req.body.userId;\n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to retrieve user settings\",\n      });\n    }\n    const settings = await UserService.getUserSettings(userId);\n    res.status(200).json({\n      success: true,\n      data: settings,\n      message: \"User settings retrieved successfully\",\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to retrieve user settings\",\n    });\n  }\n}\n// PUT /api/user/settings\nexport async function updateSettings(req: Request, res: Response) {\n  try {\n    // Extract userId from authenticated token (req.user set by verifyToken middleware)\n    const authenticatedUserId = (req as any).user?.id;\n    console.log(\n      \"🔍 updateSettings called - authenticatedUserId:\",\n      authenticatedUserId\n    );\n    console.log(\"📝 Request body:\", JSON.stringify(req.body, null, 2));\n\n    // Verify user is authenticated\n    if (!authenticatedUserId) {\n      console.error(\"❌ No authenticated user found\");\n      return res.status(401).json({\n        success: false,\n        error: \"Unauthorized\",\n        message: \"Authentication required\",\n      });\n    }\n\n    const { userId, ...settings } = req.body;\n    if (!userId) {\n      return res.status(400).json({\n        success: false,\n        error: \"User ID is required\",\n        message: \"Failed to update user settings\",\n      });\n    }\n\n    // Verify user is only updating their own settings\n    if (userId !== authenticatedUserId) {\n      console.warn(\n        `❌ Unauthorized update attempt: user ${authenticatedUserId} tried to update settings for user ${userId}`\n      );\n      return res.status(403).json({\n        success: false,\n        error: \"Forbidden\",\n        message: \"Cannot update other users' settings\",\n      });\n    }\n\n    // Update User email if provided\n    if (settings.email !== undefined) {\n      await UserService.updateUser(userId, { email: settings.email });\n    }\n\n    // Update Contacts info if provided\n    if (\n      settings.phoneNumber !== undefined ||\n      settings.emergencyContact !== undefined ||\n      settings.emergencyContactNumber !== undefined\n    ) {\n      if (UserService.updateContact) {\n        await UserService.updateContact(userId, {\n          phoneNumber: settings.phoneNumber,\n          emergencyContact: settings.emergencyContact,\n          emergencyContactNumber: settings.emergencyContactNumber,\n        });\n      }\n    }\n\n    // Update UserSettings if any settings provided\n    const userSettingsFields = [\n      \"language\",\n      \"generalReminders\",\n      \"personalReminders\",\n      \"cameraAccess\",\n      \"locationAccess\",\n      \"cookiesAccess\",\n    ];\n    const hasSettings = userSettingsFields.some(\n      (key) => settings[key] !== undefined\n    );\n    if (hasSettings && UserService.updateUserSettings) {\n      // Only extract UserSettings fields, not contact or user fields\n      const sanitizedSettings: Prisma.UserSettingsUpdateInput = {};\n\n      if (settings.language !== undefined) {\n        sanitizedSettings.language = settings.language;\n      }\n      if (settings.generalReminders !== undefined) {\n        sanitizedSettings.generalReminders = Boolean(settings.generalReminders);\n      }\n      if (settings.personalReminders !== undefined) {\n        sanitizedSettings.personalReminders = Boolean(\n          settings.personalReminders\n        );\n      }\n      if (settings.cameraAccess !== undefined) {\n        sanitizedSettings.cameraAccess = Boolean(settings.cameraAccess);\n      }\n      if (settings.locationAccess !== undefined) {\n        sanitizedSettings.locationAccess = Boolean(settings.locationAccess);\n      }\n      if (settings.cookiesAccess !== undefined) {\n        sanitizedSettings.cookiesAccess = Boolean(settings.cookiesAccess);\n      }\n\n      await UserService.updateUserSettings(userId, sanitizedSettings);\n    }\n\n    // Additional action: log settings update\n    console.log(`User settings updated: ${userId}`);\n\n    res.status(200).json({\n      success: true,\n      message: \"User settings updated successfully\",\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      message: \"Failed to update user settings\",\n    });\n  }\n}\n"]}