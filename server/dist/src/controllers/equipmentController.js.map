{"version":3,"file":"equipmentController.js","sourceRoot":"/","sources":["src/controllers/equipmentController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,gBAAgB,MAAM,iCAAiC,CAAC;AAEpE,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,GAAY,EAAE,GAAa;IAC5D,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,2BAA2B,EAAE,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC;AAED,0BAA0B;AAC1B,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,GAAY,EAAE,GAAa;IAC/D,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAChE,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,0DAA0D;AAC1D,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,GAAY,EAAE,GAAa;IAClE,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,sCAAsC;aAChD,CAAC,CAAC;QACL,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC","sourcesContent":["// server/src/controllers/equipmentController.ts\nimport type { Request, Response } from \"express\";\nimport * as equipmentService from \"../services/equipmentService.js\";\n\nexport async function getEquipment(req: Request, res: Response) {\n  try {\n    const equipment = await equipmentService.getEquipment(req.query);\n    res.json(equipment);\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch equipment\" });\n  }\n}\n\n// Create equipment (POST)\nexport async function createEquipment(req: Request, res: Response) {\n  try {\n    console.log(\"Received createEquipment request:\", req.body);\n    const result = await equipmentService.createEquipment(req.body);\n    res.status(201).json({ success: true, data: result });\n  } catch (error: any) {\n    console.error(\"Error creating equipment:\", error);\n    res.status(400).json({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n}\n\n// Get a jobsite by QR code (for QR code uniqueness check)\nexport async function getEquipmentByQrId(req: Request, res: Response) {\n  try {\n    const { qrId } = req.params;\n    if (!qrId) {\n      return res.status(400).json({ error: \"Invalid QR code\" });\n    }\n    const equipment = await equipmentService.getEquipmentByQrId(qrId);\n    if (!equipment) {\n      return res.status(200).json({\n        available: true,\n        message: \"QR code is available and not in use.\",\n      });\n    }\n    res.json({ available: false, equipment });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n}\n"]}