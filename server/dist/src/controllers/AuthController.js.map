{"version":3,"file":"authController.js","sourceRoot":"/","sources":["src/controllers/authController.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AACnC,OAAO,GAAG,MAAM,cAAc,CAAC;AAC/B,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,MAAM,MAAM,kBAAkB,CAAC;AACtC,OAAO,MAAM,MAAM,kBAAkB,CAAC;AAEtC,MAAM,CAAC,MAAM,EAAE,CAAC;AAMhB,MAAM,CAAC,MAAM,SAAS,GAAG,KAAK,EAC5B,GAAoB,EACpB,GAAqB,EACrB,EAAE;IACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAGlC,CAAC;IAEF,mCAAmC;IACnC,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ;QACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;IAEhE,IAAI,CAAC;QACH,2BAA2B;QAC3B,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI;YAAE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAEzE,qBAAqB;QACrB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa;YAChB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,CAAC,CAAC;QAEhE,MAAM,OAAO,GAAmB;YAC9B,EAAE,EAAE,IAAI,CAAC,EAAE;SACZ,CAAC;QACF,mBAAmB;QACnB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,EAAE;YAChD,SAAS,EAAE,MAAM,CAAC,aAAa,EAAE,UAAU;SAC5C,CAAC,CAAC;QAEH,mEAAmE;QACnE,MAAM,aAAa,GAAG;YACpB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;YAC7C,QAAQ,EAAE,MAAM,EAAE,+DAA+D;YACjF,MAAM,EAAE,MAAM,CAAC,aAAa,GAAG,IAAI,EAAE,wBAAwB;SACrD,CAAC;QAEX,+EAA+E;QAC/E,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;QAE5C,OAAO,GAAG;aACP,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IAC3E,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAClE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import express from \"express\";\nimport { compare } from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport prisma from \"../lib/prisma.js\";\nimport config from \"../lib/config.js\";\n\ndotenv.config();\n\ninterface JwtUserPayload {\n  id: string;\n}\n\nexport const loginUser = async (\n  req: express.Request,\n  res: express.Response\n) => {\n  const { username, password } = req.body as {\n    username: string;\n    password: string;\n  };\n\n  // 1. Check for missing credentials\n  if (!username || !password)\n    return res.status(400).json({ error: \"Missing credentials\" });\n\n  try {\n    // 2. Find user by username\n    const user = await prisma.user.findUnique({ where: { username } });\n    if (!user) return res.status(401).json({ error: \"Invalid credentials\" });\n\n    // 3. Verify password\n    const validPassword = await compare(password, user.password);\n    if (!validPassword)\n      return res.status(401).json({ error: \"Invalid credentials\" });\n\n    const payload: JwtUserPayload = {\n      id: user.id,\n    };\n    // create JWT token\n    const token = jwt.sign(payload, config.jwtSecret, {\n      expiresIn: config.jwtExpiration, // 30 days\n    });\n\n    // set token in httpOnly cookie so client can send it with requests\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"none\", // necessary for cross-site cookies with credentials: 'include'\n      maxAge: config.jwtExpiration * 1000, // convert seconds -> ms\n    } as const;\n\n    // name the cookie `token`; this allows the middleware to read it as a fallback\n    res.cookie(\"session\", token, cookieOptions);\n\n    return res\n      .status(200)\n      .json({ message: \"Login successful\", token, user: { user: payload } });\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n"]}