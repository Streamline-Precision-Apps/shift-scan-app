{"version":3,"file":"notificationController.js","sourceRoot":"/","sources":["src/controllers/notificationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Request, Response } from \"express\";\nimport {\n  createNotification,\n  updateNotificationUrl,\n  findTopicSubscription,\n  createTopicSubscription,\n  deleteTopicSubscription,\n} from \"../models/notificationModel.js\";\nimport { getFirebaseAdmin } from \"../lib/firebase.js\";\nimport type { Message } from \"firebase-admin/messaging\";\n\nexport async function sendNotificationMulticast(req: Request, res: Response) {\n  const admin = getFirebaseAdmin();\n  const { topic, title, message, link, referenceId } = req.body;\n\n  if (!topic) {\n    return res\n      .status(400)\n      .json({ error: \"Topic is required for sending notifications\" });\n  }\n  if (!title || !message) {\n    return res\n      .status(400)\n      .json({ error: \"Title and message body are required\" });\n  }\n\n  try {\n    // Store the notification in the database\n\n    const notification = await createNotification({\n      topic,\n      title,\n      body: message,\n      url: link ?? null,\n      pushedAt: new Date(),\n      pushAttempts: 1,\n      referenceId: referenceId?.toString() ?? null,\n    });\n\n    const urlWithId = `${notification.url ? notification.url : \"/admins\"}${\n      notification.url?.includes(\"?\") ? \"&\" : \"?\"\n    }notificationId=${notification.id}`;\n    const notificationLink = await updateNotificationUrl(\n      notification.id,\n      urlWithId\n    );\n\n    // Create the FCM message payload\n    let payload: Message;\n    if (notificationLink.url) {\n      payload = {\n        notification: { title, body: message },\n        topic,\n        webpush: { fcmOptions: { link: notificationLink.url } },\n      };\n    } else {\n      payload = {\n        notification: { title, body: message },\n        topic,\n      };\n    }\n\n    // Send the message to Firebase\n    const response = await admin.messaging().send(payload);\n\n    return res.status(200).json({\n      messageId: response,\n      success: true,\n      sentToTopic: topic,\n    });\n  } catch (error) {\n    console.error(\n      \"[send-notification] ‚ùå Error in notification process:\",\n      error\n    );\n    return res.status(500).json({\n      error: \"Failed to send notification\",\n      details: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n}\n\nexport async function sendNotification(req: Request, res: Response) {\n  const admin = getFirebaseAdmin();\n  const { token, title, message, link, topic } = req.body;\n\n  if (!token) {\n    return res.status(400).json({ error: \"Device token is required\" });\n  }\n\n  let payload: Message;\n  if (link) {\n    payload = {\n      notification: { title, body: message },\n      token,\n      webpush: { fcmOptions: { link } },\n    };\n  } else {\n    payload = {\n      notification: { title, body: message },\n      token,\n    };\n  }\n\n  try {\n    // Send the FCM notification\n    await admin.messaging().send(payload);\n\n    // Save the notification to the database\n    await createNotification({\n      topic,\n      title,\n      body: message,\n      url: link,\n      pushedAt: new Date(),\n      pushAttempts: 1,\n    });\n\n    return res\n      .status(200)\n      .json({ success: true, message: \"Notification sent!\" });\n  } catch (error) {\n    // Still save notification to DB but with failed attempt\n    try {\n      await createNotification({\n        topic,\n        title,\n        body: message,\n        url: link,\n        pushAttempts: 1,\n      });\n    } catch (dbError) {\n      console.error(\"Failed to save notification to database:\", dbError);\n    }\n\n    return res.status(500).json({ success: false, error });\n  }\n}\n\nexport async function topics(req: Request, res: Response) {\n  const admin = getFirebaseAdmin();\n  const { action, topics, token, userId } = req.body;\n\n  // Validation\n  if (!action || !Array.isArray(topics) || !token) {\n    return res.status(400).json({\n      success: false,\n      error:\n        \"Missing required fields: action, topics (array), and token are required\",\n    });\n  }\n  if (action !== \"subscribe\" && action !== \"unsubscribe\") {\n    return res.status(400).json({\n      success: false,\n      error: \"Invalid action. Must be 'subscribe' or 'unsubscribe'\",\n    });\n  }\n\n  // Format topics to ensure they start with /topics/\n  const formattedTopics = topics.map((topic: string) =>\n    topic.startsWith(\"/topics/\") ? topic : `/topics/${topic}`\n  );\n\n  const results = [];\n  const batchSize = 1000;\n  for (let i = 0; i < formattedTopics.length; i += batchSize) {\n    const batch = formattedTopics.slice(i, i + batchSize);\n    for (const topic of batch) {\n      let response;\n      if (action === \"subscribe\") {\n        response = await admin.messaging().subscribeToTopic(token, topic);\n        // Optionally record in DB if userId is provided and successful\n        if (response.successCount > 0 && userId) {\n          const topicName = topic.replace(\"/topics/\", \"\");\n          const existing = await findTopicSubscription(userId, topicName);\n          if (!existing) {\n            await createTopicSubscription(userId, topicName);\n          }\n        }\n      } else {\n        response = await admin.messaging().unsubscribeFromTopic(token, topic);\n        if (response.successCount > 0 && userId) {\n          const topicName = topic.replace(\"/topics/\", \"\");\n          await deleteTopicSubscription(userId, topicName);\n        }\n      }\n      results.push({\n        topic,\n        success: response.successCount > 0,\n        failureCount: response.failureCount,\n      });\n    }\n  }\n\n  return res.status(200).json({\n    success: true,\n    message: `Successfully processed ${action} for ${\n      results.filter((r) => r.success).length\n    } out of ${topics.length} topics`,\n    results,\n  });\n}\n"]}