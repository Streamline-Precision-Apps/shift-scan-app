{"version":3,"file":"cookiesController.js","sourceRoot":"/","sources":["src/controllers/cookiesController.ts"],"names":[],"mappings":"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","sourcesContent":["// GET /api/cookies?name=key\nimport express from \"express\";\n\nexport function getCookie(req: express.Request, res: express.Response) {\n  let { name } = req.query;\n  if (!name) {\n    console.warn(\"❌ GET cookie: Missing cookie name parameter\");\n    return res.status(400).json({ error: \"Missing cookie name\" });\n  }\n  if (Array.isArray(name)) name = name[0];\n  if (typeof name !== \"string\") {\n    console.warn(\"❌ GET cookie: Invalid cookie name type\");\n    return res.status(400).json({ error: \"Invalid cookie name\" });\n  }\n  \n  const value = req.cookies?.[name];\n  console.log(`📖 GET cookie: ${name} = ${value || \"(not found)\"}`);\n  \n  if (value === undefined) {\n    if (name === \"currentPageView\") {\n      return res.status(200).json({ value: \"\" });\n    }\n    console.warn(`⚠️  Cookie not found: ${name}`);\n    return res.status(404).json({ error: \"Cookie not found\" });\n  }\n  \n  res.json({ value });\n}\n\n// POST or PUT /api/cookies { name, value, options }\n// UPSERT: Creates cookie if it doesn't exist, updates if it does\nexport function setCookie(req: express.Request, res: express.Response) {\n  const { name, value, options } = req.body;\n  \n  if (!name || value === undefined) {\n    console.error(\"❌ Missing name or value in request\");\n    return res.status(400).json({ error: \"Missing name or value\" });\n  }\n  \n  console.log(`📝 Setting cookie (UPSERT): ${name} = ${value}`);\n  console.log(`   Client options:`, options);\n  \n  // Get current cookie value to check if it exists\n  const existingValue = req.cookies?.[name];\n  const isUpdate = existingValue !== undefined;\n  \n  if (isUpdate) {\n    console.log(`   Action: UPDATE (existing value was: ${existingValue})`);\n  } else {\n    console.log(`   Action: CREATE (new cookie)`);\n  }\n  \n  // IMPORTANT: Set proper cookie options to ensure browser receives it\n  const cookieOptions = {\n    path: \"/\",\n    httpOnly: false, // Must be false so client can read it\n    maxAge: 60 * 60 * 24 * 365, // 1 year\n    ...options, // Merge with provided options\n  };\n  \n  console.log(`   Final cookie options:`, cookieOptions);\n  \n  // Set the cookie\n  res.cookie(name, value, cookieOptions);\n  \n  console.log(`✅ Cookie ${isUpdate ? \"updated\" : \"created\"} successfully: ${name} = ${value}`);\n  console.log(`   Set-Cookie header should be sent to browser`);\n  \n  res.json({ \n    message: `Cookie ${isUpdate ? \"updated\" : \"created\"}`,\n    name, \n    value,\n    action: isUpdate ? \"UPDATE\" : \"CREATE\",\n    options: cookieOptions\n  });\n}// DELETE /api/cookies?name=key or /api/cookies (delete all)\nexport function deleteCookie(req: express.Request, res: express.Response) {\n  let { name } = req.query;\n  if (name) {\n    if (Array.isArray(name)) name = name[0];\n    if (typeof name === \"string\") {\n      res.clearCookie(name);\n      return res.json({ message: `Cookie '${name}' deleted` });\n    } else {\n      return res.status(400).json({ error: \"Invalid cookie name\" });\n    }\n  }\n  // Delete all cookies\n  if (req.cookies) {\n    Object.keys(req.cookies).forEach((cookieName) => {\n      res.clearCookie(cookieName);\n    });\n  }\n  res.json({ message: \"All cookies deleted\" });\n}\n"]}