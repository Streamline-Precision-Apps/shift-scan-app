{"version":3,"file":"initRoutes.js","sources":["src/routes/initRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport { initHandler } from \"../controllers/initController.js\";\nimport { payPeriodSheetsHandler } from \"../controllers/payPeriodController.js\";\nimport { verifyToken } from \"../middleware/authMiddleware.js\";\nimport {\n  createFormApproval,\n  createFormSubmission,\n  deleteFormSubmission,\n  saveDraft,\n  saveDraftToPending,\n  savePending,\n  updateFormApproval,\n} from \"../controllers/formsController.js\";\nimport { UserController } from \"../controllers/userController.js\";\nconst router = Router();\n// Define your init routes here\n\n/**\n * @swagger\n * /api/v1/init:\n *   post:\n *     summary: Initialize user session and get user info\n *     description: Returns user information and settings for a given userId.\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               token:\n *                 type: string\n *                 description: JWT token for authentication\n *               userId:\n *                 type: string\n *                 description: User ID to fetch info for\n *             required:\n *               - token\n *               - userId\n *     responses:\n *       '200':\n *         description: User info and settings\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   type: object\n *                   description: User data (excluding password)\n *       '400':\n *         description: Missing userId\n *       '404':\n *         description: User not found\n *       '500':\n *         description: Server error\n */\n\nrouter.post(\"/init\", initHandler);\n\n/**\n * @swagger\n * /api/v1/pay-period-timesheets:\n *   post:\n *     summary: Get pay period timesheets for a user\n *     description: Returns timesheets for the current pay period for the given userId.\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userId:\n *                 type: string\n *                 description: User ID to fetch timesheets for\n *             required:\n *               - userId\n *     responses:\n *       '200':\n *         description: Pay period timesheets\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: object\n *                 properties:\n *                   id:\n *                     type: string\n *                   startTime:\n *                     type: string\n *                     format: date-time\n *                   endTime:\n *                     type: string\n *                     format: date-time\n *       '401':\n *         description: Unauthorized or missing userId\n *       '500':\n *         description: Server error\n */\nrouter.post(\"/pay-period-timesheets\", payPeriodSheetsHandler);\n\n// Form submission\nrouter.post(\"/forms/submission\", verifyToken, createFormSubmission);\nrouter.delete(\"/forms/submission/:id\", verifyToken, deleteFormSubmission);\n// Drafts\nrouter.post(\"/forms/draft\", verifyToken, saveDraft);\nrouter.post(\"/forms/draft-to-pending\", verifyToken, saveDraftToPending);\nrouter.post(\"/forms/pending\", verifyToken, savePending);\n// Approvals\nrouter.post(\"/forms/approval\", verifyToken, createFormApproval);\nrouter.put(\"/forms/approval/update\", verifyToken, updateFormApproval);\n\n/**\n * @swagger\n * /api/v1/user:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get all users\n *     description: Retrieve a list of all users (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n */\nrouter.get(\"/user\", UserController.getUsers);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get user by ID\n *     description: Retrieve a specific user by their ID (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.get(\"/user/:id\", verifyToken, UserController.getUserById);\n\n/**\n * @swagger\n * /api/v1/user:\n *   post:\n *     tags:\n *       - Users\n *     summary: Create a new user\n *     description: Create a new user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - firstName\n *               - lastName\n *               - username\n *               - password\n *               - companyId\n *               - truckView\n *               - tascoView\n *               - laborView\n *               - mechanicView\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       201:\n *         description: User created successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       400:\n *         description: Bad request\n */\nrouter.post(\"/user\", verifyToken, UserController.createUser);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   put:\n *     tags:\n *       - Users\n *     summary: Update user\n *     description: Update an existing user (requires authentication). You must send fields to update in the request body.\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: false\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       200:\n *         description: User updated successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.put(\"/user/:id\", verifyToken, UserController.updateUser);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   delete:\n *     tags:\n *       - Users\n *     summary: Delete user\n *     description: Delete a user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User deleted successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.delete(\"/user/:id\", verifyToken, UserController.deleteUser);\n\n/**\n * @swagger\n * /api/v1/user/settings:\n *   put:\n *     tags:\n *       - Users\n *     summary: Update user settings\n *     description: Update the settings of an existing user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userId:\n *                 type: string\n *               phoneNumber:\n *                 type: string\n *               email:\n *                 type: string\n *               emergencyContact:\n *                 type: string\n *               emergencyContactNumber:\n *                 type: string\n *               language:\n *                 type: string\n *               generalReminders:\n *                 type: boolean\n *               personalReminders:\n *                 type: boolean\n *               cameraAccess:\n *                 type: boolean\n *               locationAccess:\n *                 type: boolean\n *               cookiesAccess:\n *                 type: boolean\n *     responses:\n *       200:\n *         description: User settings updated successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       400:\n *         description: Bad request\n */\nrouter.put(\"/user/settings\", verifyToken, UserController.updateSettings);\n\nexport default router;\n"],"names":[],"mappings":";;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAC;AAC/D,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAC/E,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EACL,kBAAkB,EAClB,oBAAoB,EACpB,oBAAoB,EACpB,SAAS,EACT,kBAAkB,EAClB,WAAW,EACX,kBAAkB,GACnB,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,kCAAkC,CAAC;AAClE,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AACxB,+BAA+B;AAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AAEH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,sBAAsB,CAAC,CAAC;AAE9D,kBAAkB;AAClB,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,WAAW,EAAE,oBAAoB,CAAC,CAAC;AACpE,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,WAAW,EAAE,oBAAoB,CAAC,CAAC;AAC1E,SAAS;AACT,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;AACpD,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACxE,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;AACxD,YAAY;AACZ,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC;AAChE,MAAM,CAAC,GAAG,CAAC,wBAAwB,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC;AAEtE;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;AAE7C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAEjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqFG;AACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAE7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiFG;AACH,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAEhE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,WAAW,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;AAEzE,eAAe,MAAM,CAAC","debug_id":"46d7146c-26ad-526a-9277-85159f4ff538"}