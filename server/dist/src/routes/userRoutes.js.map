{"version":3,"file":"userRoutes.js","sources":["src/routes/userRoutes.ts"],"sourceRoot":"/","sourcesContent":["import { Router } from \"express\";\nimport * as UserController from \"../controllers/userController.js\";\nimport { verifyToken } from \"../middleware/authMiddleware.js\";\n\nconst router = Router();\n\n/**\n * @swagger\n * /api/users:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get all users\n *     description: Retrieve a list of all users (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n */\nrouter.get(\"/\", UserController.getUsers);\n\n/**\n * @swagger\n * /api/users/{id}:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get user by ID\n *     description: Retrieve a specific user by their ID (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.get(\"/:id\", verifyToken, UserController.getUserById);\n\n/**\n * @swagger\n * /api/users:\n *   post:\n *     tags:\n *       - Users\n *     summary: Create a new user\n *     description: Create a new user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - firstName\n *               - lastName\n *               - username\n *               - password\n *               - companyId\n *               - truckView\n *               - tascoView\n *               - laborView\n *               - mechanicView\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       201:\n *         description: User created successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       400:\n *         description: Bad request\n */\nrouter.post(\"/\", verifyToken, UserController.createUser);\n\n/**\n * @swagger\n * /api/users/{id}:\n *   put:\n *     tags:\n *       - Users\n *     summary: Update user\n *     description: Update an existing user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       200:\n *         description: User updated successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.put(\"/:id\", verifyToken, UserController.updateUser);\n\n/**\n * @swagger\n * /api/users/{id}:\n *   delete:\n *     tags:\n *       - Users\n *     summary: Delete user\n *     description: Delete a user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User deleted successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.delete(\"/:id\", verifyToken, UserController.deleteUser);\n\nexport default router;\n"],"names":[],"mappings":";;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,KAAK,cAAc,MAAM,kCAAkC,CAAC;AACnE,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9D,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AAE5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqFG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiFG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;AAE9D,eAAe,MAAM,CAAC","debug_id":"b4511ff3-db56-5e1d-827a-bec1bbeedf1b"}