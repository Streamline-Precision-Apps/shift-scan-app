{"version":3,"file":"userRoute.js","sourceRoot":"/","sources":["src/routes/userRoute.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AACjC,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAE9D,OAAO,EACL,UAAU,EACV,UAAU,EACV,WAAW,EACX,QAAQ,EACR,cAAc,EACd,UAAU,EACV,sBAAsB,EACtB,cAAc,GACf,MAAM,kCAAkC,CAAC;AAC1C,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC;AAExB;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqFG;AACH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiFG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AAEH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;AAEjD,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;AAErD,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;AAExC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAE/C,eAAe,MAAM,CAAC","sourcesContent":["import { Router } from \"express\";\nimport { verifyToken } from \"../middleware/authMiddleware.js\";\n\nimport {\n  createUser,\n  deleteUser,\n  getUserById,\n  getUsers,\n  updateSettings,\n  updateUser,\n  getUserSettingsByQuery,\n  getUserContact,\n} from \"../controllers/userController.js\";\nconst router = Router();\n\n/**\n * @swagger\n * /api/v1/user:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get all users\n *     description: Retrieve a list of all users (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: List of users retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n */\nrouter.get(\"/\", verifyToken, getUsers);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   get:\n *     tags:\n *       - Users\n *     summary: Get user by ID\n *     description: Retrieve a specific user by their ID (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User retrieved successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.get(\"/:id\", verifyToken, getUserById);\n\n/**\n * @swagger\n * /api/v1/user:\n *   post:\n *     tags:\n *       - Users\n *     summary: Create a new user\n *     description: Create a new user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - firstName\n *               - lastName\n *               - username\n *               - password\n *               - companyId\n *               - truckView\n *               - tascoView\n *               - laborView\n *               - mechanicView\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       201:\n *         description: User created successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       400:\n *         description: Bad request\n */\nrouter.post(\"/\", verifyToken, createUser);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   put:\n *     tags:\n *       - Users\n *     summary: Update user\n *     description: Update an existing user (requires authentication). You must send fields to update in the request body.\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: false\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               firstName:\n *                 type: string\n *               lastName:\n *                 type: string\n *               username:\n *                 type: string\n *               password:\n *                 type: string\n *               companyId:\n *                 type: string\n *               email:\n *                 type: string\n *                 nullable: true\n *               signature:\n *                 type: string\n *                 nullable: true\n *               DOB:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               truckView:\n *                 type: boolean\n *               tascoView:\n *                 type: boolean\n *               laborView:\n *                 type: boolean\n *               mechanicView:\n *                 type: boolean\n *               permission:\n *                 type: string\n *                 enum: [USER, ADMIN, SUPERADMIN]\n *               image:\n *                 type: string\n *                 nullable: true\n *               startDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               terminationDate:\n *                 type: string\n *                 format: date-time\n *                 nullable: true\n *               workTypeId:\n *                 type: string\n *                 nullable: true\n *               middleName:\n *                 type: string\n *                 nullable: true\n *               secondLastName:\n *                 type: string\n *                 nullable: true\n *     responses:\n *       200:\n *         description: User updated successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\n/**\n * @swagger\n * /api/v1/user/settings:\n *   put:\n *     tags:\n *       - Users\n *     summary: Update user settings\n *     description: Update the settings of an existing user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               userId:\n *                 type: string\n *               phoneNumber:\n *                 type: string\n *               email:\n *                 type: string\n *               emergencyContact:\n *                 type: string\n *               emergencyContactNumber:\n *                 type: string\n *               language:\n *                 type: string\n *               generalReminders:\n *                 type: boolean\n *               personalReminders:\n *                 type: boolean\n *               cameraAccess:\n *                 type: boolean\n *               locationAccess:\n *                 type: boolean\n *               cookiesAccess:\n *                 type: boolean\n *     responses:\n *       200:\n *         description: User settings updated successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       400:\n *         description: Bad request\n */\n\nrouter.post(\"/settings\", getUserSettingsByQuery);\n\nrouter.put(\"/settings\", verifyToken, updateSettings);\n\nrouter.post(\"/contact\", getUserContact);\n\nrouter.put(\"/:id\", verifyToken, updateUser);\n\n/**\n * @swagger\n * /api/v1/user/{id}:\n *   delete:\n *     tags:\n *       - Users\n *     summary: Delete user\n *     description: Delete a user (requires authentication)\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - name: id\n *         in: path\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: User deleted successfully\n *       401:\n *         description: Unauthorized - invalid or missing bearer token\n *       404:\n *         description: User not found\n */\nrouter.delete(\"/:id\", verifyToken, deleteUser);\n\nexport default router;\n"]}