
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  addressId: 'addressId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  SubscriptionDate: 'SubscriptionDate'
};

exports.Prisma.CostCodeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  code: 'code'
};

exports.Prisma.CCTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.CrewScalarFieldEnum = {
  id: 'id',
  name: 'name',
  leadId: 'leadId',
  crewType: 'crewType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PdfDocumentScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  fileName: 'fileName',
  description: 'description',
  fileData: 'fileData',
  contentType: 'contentType',
  size: 'size',
  isActive: 'isActive',
  createdAt: 'createdAt',
  uploadDate: 'uploadDate'
};

exports.Prisma.DocumentTagScalarFieldEnum = {
  id: 'id',
  tagName: 'tagName'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  name: 'name',
  description: 'description',
  creationReason: 'creationReason',
  equipmentTag: 'equipmentTag',
  state: 'state',
  approvalStatus: 'approvalStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  overWeight: 'overWeight',
  currentWeight: 'currentWeight',
  createdById: 'createdById',
  createdVia: 'createdVia',
  acquiredDate: 'acquiredDate',
  code: 'code',
  color: 'color',
  licensePlate: 'licensePlate',
  licenseState: 'licenseState',
  make: 'make',
  memo: 'memo',
  model: 'model',
  ownershipType: 'ownershipType',
  registrationExpiration: 'registrationExpiration',
  serialNumber: 'serialNumber',
  year: 'year',
  acquiredCondition: 'acquiredCondition',
  status: 'status'
};

exports.Prisma.EmployeeEquipmentLogScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  maintenanceId: 'maintenanceId',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment',
  timeSheetId: 'timeSheetId',
  rental: 'rental'
};

exports.Prisma.FormTemplateScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isSignatureRequired: 'isSignatureRequired',
  description: 'description',
  isActive: 'isActive',
  formType: 'formType',
  isApprovalRequired: 'isApprovalRequired'
};

exports.Prisma.FormGroupingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order'
};

exports.Prisma.FormFieldScalarFieldEnum = {
  id: 'id',
  formGroupingId: 'formGroupingId',
  label: 'label',
  type: 'type',
  required: 'required',
  order: 'order',
  placeholder: 'placeholder',
  maxLength: 'maxLength',
  content: 'content',
  filter: 'filter',
  minLength: 'minLength',
  multiple: 'multiple'
};

exports.Prisma.FormFieldOptionScalarFieldEnum = {
  id: 'id',
  fieldId: 'fieldId',
  value: 'value'
};

exports.Prisma.FormSubmissionScalarFieldEnum = {
  title: 'title',
  formTemplateId: 'formTemplateId',
  userId: 'userId',
  formType: 'formType',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  submittedAt: 'submittedAt',
  status: 'status',
  id: 'id'
};

exports.Prisma.FormApprovalScalarFieldEnum = {
  id: 'id',
  signedBy: 'signedBy',
  submittedAt: 'submittedAt',
  updatedAt: 'updatedAt',
  signature: 'signature',
  comment: 'comment',
  formSubmissionId: 'formSubmissionId'
};

exports.Prisma.JobsiteScalarFieldEnum = {
  id: 'id',
  qrId: 'qrId',
  name: 'name',
  description: 'description',
  creationReason: 'creationReason',
  approvalStatus: 'approvalStatus',
  addressId: 'addressId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archiveDate: 'archiveDate',
  createdById: 'createdById',
  createdVia: 'createdVia',
  code: 'code',
  latitude: 'latitude',
  longitude: 'longitude',
  radiusMeters: 'radiusMeters',
  status: 'status'
};

exports.Prisma.ReportScalarFieldEnum = {
  name: 'name',
  description: 'description',
  companyId: 'companyId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  parameters: 'parameters',
  visibility: 'visibility',
  tags: 'tags',
  id: 'id'
};

exports.Prisma.ReportRunScalarFieldEnum = {
  id: 'id',
  runAt: 'runAt',
  status: 'status',
  results: 'results',
  duration: 'duration',
  startDate: 'startDate',
  endDate: 'endDate',
  customParams: 'customParams',
  exportFormats: 'exportFormats',
  lastExportedAt: 'lastExportedAt',
  reportId: 'reportId'
};

exports.Prisma.TimeSheetScalarFieldEnum = {
  date: 'date',
  userId: 'userId',
  jobsiteId: 'jobsiteId',
  costcode: 'costcode',
  nu: 'nu',
  Fp: 'Fp',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment',
  statusComment: 'statusComment',
  location: 'location',
  status: 'status',
  workType: 'workType',
  editedByUserId: 'editedByUserId',
  newTimeSheetId: 'newTimeSheetId',
  createdByAdmin: 'createdByAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clockInLat: 'clockInLat',
  clockInLng: 'clockInLng',
  clockOutLat: 'clockOutLat',
  clockOutLng: 'clockOutLng',
  withinFenceIn: 'withinFenceIn',
  withinFenceOut: 'withinFenceOut',
  wasInjured: 'wasInjured',
  id: 'id'
};

exports.Prisma.MechanicProjectsScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  hours: 'hours',
  equipmentId: 'equipmentId',
  description: 'description'
};

exports.Prisma.MaintenanceLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  maintenanceId: 'maintenanceId',
  startTime: 'startTime',
  endTime: 'endTime',
  comment: 'comment',
  timeSheetId: 'timeSheetId'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  equipmentIssue: 'equipmentIssue',
  employeeEquipmentLogId: 'employeeEquipmentLogId',
  additionalInfo: 'additionalInfo',
  location: 'location',
  problemDiagnosis: 'problemDiagnosis',
  solution: 'solution',
  totalHoursLaboured: 'totalHoursLaboured',
  createdAt: 'createdAt',
  priority: 'priority',
  delay: 'delay',
  delayReasoning: 'delayReasoning',
  repaired: 'repaired',
  selected: 'selected',
  hasBeenDelayed: 'hasBeenDelayed',
  createdBy: 'createdBy'
};

exports.Prisma.TascoLogScalarFieldEnum = {
  id: 'id',
  shiftType: 'shiftType',
  equipmentId: 'equipmentId',
  laborType: 'laborType',
  materialType: 'materialType',
  LoadQuantity: 'LoadQuantity',
  screenType: 'screenType',
  timeSheetId: 'timeSheetId'
};

exports.Prisma.TascoMaterialTypesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TruckingLogScalarFieldEnum = {
  id: 'id',
  laborType: 'laborType',
  taskName: 'taskName',
  equipmentId: 'equipmentId',
  startingMileage: 'startingMileage',
  endingMileage: 'endingMileage',
  truckLaborLogId: 'truckLaborLogId',
  trailerNumber: 'trailerNumber',
  truckNumber: 'truckNumber',
  timeSheetId: 'timeSheetId'
};

exports.Prisma.StateMileageScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  state: 'state',
  stateLineMileage: 'stateLineMileage'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  LocationOfMaterial: 'LocationOfMaterial',
  name: 'name',
  quantity: 'quantity',
  materialWeight: 'materialWeight',
  loadType: 'loadType',
  createdAt: 'createdAt',
  unit: 'unit'
};

exports.Prisma.RefuelLogScalarFieldEnum = {
  id: 'id',
  employeeEquipmentLogId: 'employeeEquipmentLogId',
  truckingLogId: 'truckingLogId',
  tascoLogId: 'tascoLogId',
  gallonsRefueled: 'gallonsRefueled',
  milesAtFueling: 'milesAtFueling'
};

exports.Prisma.EquipmentHauledScalarFieldEnum = {
  id: 'id',
  truckingLogId: 'truckingLogId',
  equipmentId: 'equipmentId',
  createdAt: 'createdAt',
  endMileage: 'endMileage',
  startMileage: 'startMileage',
  destination: 'destination',
  source: 'source'
};

exports.Prisma.TimeSheetChangeLogScalarFieldEnum = {
  id: 'id',
  timeSheetId: 'timeSheetId',
  changedBy: 'changedBy',
  changedAt: 'changedAt',
  changeReason: 'changeReason',
  changes: 'changes',
  wasStatusChange: 'wasStatusChange',
  numberOfChanges: 'numberOfChanges'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  email: 'email',
  password: 'password',
  signature: 'signature',
  DOB: 'DOB',
  truckView: 'truckView',
  tascoView: 'tascoView',
  laborView: 'laborView',
  mechanicView: 'mechanicView',
  permission: 'permission',
  image: 'image',
  startDate: 'startDate',
  terminationDate: 'terminationDate',
  accountSetup: 'accountSetup',
  clockedIn: 'clockedIn',
  companyId: 'companyId',
  passwordResetTokenId: 'passwordResetTokenId',
  workTypeId: 'workTypeId',
  middleName: 'middleName',
  secondLastName: 'secondLastName',
  lastSeen: 'lastSeen'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  generalReminders: 'generalReminders',
  personalReminders: 'personalReminders',
  cameraAccess: 'cameraAccess',
  locationAccess: 'locationAccess',
  cookiesAccess: 'cookiesAccess',
  createdAt: 'createdAt',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ContactsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phoneNumber: 'phoneNumber',
  emergencyContact: 'emergencyContact',
  emergencyContactNumber: 'emergencyContactNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expiration: 'expiration'
};

exports.Prisma.AccountSetupTokenScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  expiresAt: 'expiresAt',
  used: 'used'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country'
};

exports.Prisma.FCMTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  platform: 'platform',
  lastUsedAt: 'lastUsedAt',
  isValid: 'isValid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicSubscriptionScalarFieldEnum = {
  id: 'id',
  topic: 'topic',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  topic: 'topic',
  title: 'title',
  body: 'body',
  url: 'url',
  metadata: 'metadata',
  createdAt: 'createdAt',
  pushedAt: 'pushedAt',
  pushAttempts: 'pushAttempts',
  readAt: 'readAt',
  id: 'id',
  referenceId: 'referenceId'
};

exports.Prisma.NotificationResponseScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  userId: 'userId',
  response: 'response',
  respondedAt: 'respondedAt'
};

exports.Prisma.NotificationReadScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.WorkType = exports.$Enums.WorkType = {
  MECHANIC: 'MECHANIC',
  TRUCK_DRIVER: 'TRUCK_DRIVER',
  LABOR: 'LABOR',
  TASCO: 'TASCO'
};

exports.EquipmentTags = exports.$Enums.EquipmentTags = {
  TRUCK: 'TRUCK',
  TRAILER: 'TRAILER',
  VEHICLE: 'VEHICLE',
  EQUIPMENT: 'EQUIPMENT'
};

exports.EquipmentState = exports.$Enums.EquipmentState = {
  AVAILABLE: 'AVAILABLE',
  IN_USE: 'IN_USE',
  MAINTENANCE: 'MAINTENANCE',
  NEEDS_REPAIR: 'NEEDS_REPAIR',
  RETIRED: 'RETIRED'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.CreatedVia = exports.$Enums.CreatedVia = {
  ADMIN: 'ADMIN',
  MOBILE: 'MOBILE'
};

exports.OwnershipType = exports.$Enums.OwnershipType = {
  OWNED: 'OWNED',
  LEASED: 'LEASED',
  RENTAL: 'RENTAL'
};

exports.Condition = exports.$Enums.Condition = {
  NEW: 'NEW',
  USED: 'USED'
};

exports.FormTemplateStatus = exports.$Enums.FormTemplateStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.FormTemplateCategory = exports.$Enums.FormTemplateCategory = {
  GENERAL: 'GENERAL',
  MAINTENANCE: 'MAINTENANCE',
  SAFETY: 'SAFETY',
  INSPECTION: 'INSPECTION',
  INCIDENT: 'INCIDENT',
  FINANCE: 'FINANCE',
  OTHER: 'OTHER',
  HR: 'HR',
  OPERATIONS: 'OPERATIONS',
  COMPLIANCE: 'COMPLIANCE',
  CLIENTS: 'CLIENTS',
  IT: 'IT'
};

exports.FieldType = exports.$Enums.FieldType = {
  TEXT: 'TEXT',
  TEXTAREA: 'TEXTAREA',
  NUMBER: 'NUMBER',
  DATE: 'DATE',
  DATE_TIME: 'DATE_TIME',
  TIME: 'TIME',
  DROPDOWN: 'DROPDOWN',
  CHECKBOX: 'CHECKBOX',
  HEADER: 'HEADER',
  PARAGRAPH: 'PARAGRAPH',
  MULTISELECT: 'MULTISELECT',
  RADIO: 'RADIO',
  SEARCH_PERSON: 'SEARCH_PERSON',
  SEARCH_ASSET: 'SEARCH_ASSET'
};

exports.FormStatus = exports.$Enums.FormStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DENIED: 'DENIED'
};

exports.ReportVisibility = exports.$Enums.ReportVisibility = {
  PRIVATE: 'PRIVATE',
  MANAGEMENT: 'MANAGEMENT',
  COMPANY: 'COMPANY'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED'
};

exports.Priority = exports.$Enums.Priority = {
  PENDING: 'PENDING',
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  TODAY: 'TODAY'
};

exports.LoadType = exports.$Enums.LoadType = {
  UNSCREENED: 'UNSCREENED',
  SCREENED: 'SCREENED'
};

exports.materialUnit = exports.$Enums.materialUnit = {
  TONS: 'TONS',
  YARDS: 'YARDS'
};

exports.Permission = exports.$Enums.Permission = {
  USER: 'USER',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  CostCode: 'CostCode',
  CCTag: 'CCTag',
  Crew: 'Crew',
  PdfDocument: 'PdfDocument',
  DocumentTag: 'DocumentTag',
  Equipment: 'Equipment',
  EmployeeEquipmentLog: 'EmployeeEquipmentLog',
  FormTemplate: 'FormTemplate',
  FormGrouping: 'FormGrouping',
  FormField: 'FormField',
  FormFieldOption: 'FormFieldOption',
  FormSubmission: 'FormSubmission',
  FormApproval: 'FormApproval',
  Jobsite: 'Jobsite',
  Report: 'Report',
  ReportRun: 'ReportRun',
  TimeSheet: 'TimeSheet',
  mechanicProjects: 'mechanicProjects',
  MaintenanceLog: 'MaintenanceLog',
  Maintenance: 'Maintenance',
  TascoLog: 'TascoLog',
  TascoMaterialTypes: 'TascoMaterialTypes',
  TruckingLog: 'TruckingLog',
  StateMileage: 'StateMileage',
  Material: 'Material',
  RefuelLog: 'RefuelLog',
  EquipmentHauled: 'EquipmentHauled',
  TimeSheetChangeLog: 'TimeSheetChangeLog',
  User: 'User',
  UserSettings: 'UserSettings',
  Contacts: 'Contacts',
  PasswordResetToken: 'PasswordResetToken',
  AccountSetupToken: 'AccountSetupToken',
  Address: 'Address',
  FCMToken: 'FCMToken',
  TopicSubscription: 'TopicSubscription',
  Notification: 'Notification',
  NotificationResponse: 'NotificationResponse',
  NotificationRead: 'NotificationRead'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
